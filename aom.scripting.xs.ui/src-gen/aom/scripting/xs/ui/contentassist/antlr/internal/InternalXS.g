/*
 * generated by Xtext
 */
grammar InternalXS;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package aom.scripting.xs.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package aom.scripting.xs.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import aom.scripting.xs.services.XSGrammarAccess;

}

@parser::members {
 
 	private XSGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(XSGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIncludeDeclaration
entryRuleIncludeDeclaration 
:
{ before(grammarAccess.getIncludeDeclarationRule()); }
	 ruleIncludeDeclaration
{ after(grammarAccess.getIncludeDeclarationRule()); } 
	 EOF 
;

// Rule IncludeDeclaration
ruleIncludeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getGroup()); }
(rule__IncludeDeclaration__Group__0)
{ after(grammarAccess.getIncludeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePseudoIncludeDeclaration
entryRulePseudoIncludeDeclaration 
:
{ before(grammarAccess.getPseudoIncludeDeclarationRule()); }
	 rulePseudoIncludeDeclaration
{ after(grammarAccess.getPseudoIncludeDeclarationRule()); } 
	 EOF 
;

// Rule PseudoIncludeDeclaration
rulePseudoIncludeDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPseudoIncludeDeclarationAccess().getGroup()); }
(rule__PseudoIncludeDeclaration__Group__0)
{ after(grammarAccess.getPseudoIncludeDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleLocalVarDeclaration
entryRuleLocalVarDeclaration 
:
{ before(grammarAccess.getLocalVarDeclarationRule()); }
	 ruleLocalVarDeclaration
{ after(grammarAccess.getLocalVarDeclarationRule()); } 
	 EOF 
;

// Rule LocalVarDeclaration
ruleLocalVarDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getGroup()); }
(rule__LocalVarDeclaration__Group__0)
{ after(grammarAccess.getLocalVarDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGlobalVarDeclaration
entryRuleGlobalVarDeclaration 
:
{ before(grammarAccess.getGlobalVarDeclarationRule()); }
	 ruleGlobalVarDeclaration
{ after(grammarAccess.getGlobalVarDeclarationRule()); } 
	 EOF 
;

// Rule GlobalVarDeclaration
ruleGlobalVarDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getGroup()); }
(rule__GlobalVarDeclaration__Group__0)
{ after(grammarAccess.getGlobalVarDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForVarDeclaration
entryRuleForVarDeclaration 
:
{ before(grammarAccess.getForVarDeclarationRule()); }
	 ruleForVarDeclaration
{ after(grammarAccess.getForVarDeclarationRule()); } 
	 EOF 
;

// Rule ForVarDeclaration
ruleForVarDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForVarDeclarationAccess().getGroup()); }
(rule__ForVarDeclaration__Group__0)
{ after(grammarAccess.getForVarDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionTypeSpecifier
entryRuleFunctionTypeSpecifier 
:
{ before(grammarAccess.getFunctionTypeSpecifierRule()); }
	 ruleFunctionTypeSpecifier
{ after(grammarAccess.getFunctionTypeSpecifierRule()); } 
	 EOF 
;

// Rule FunctionTypeSpecifier
ruleFunctionTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionTypeSpecifierAccess().getAlternatives()); }
(rule__FunctionTypeSpecifier__Alternatives)
{ after(grammarAccess.getFunctionTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleDeclaration
entryRuleRuleDeclaration 
:
{ before(grammarAccess.getRuleDeclarationRule()); }
	 ruleRuleDeclaration
{ after(grammarAccess.getRuleDeclarationRule()); } 
	 EOF 
;

// Rule RuleDeclaration
ruleRuleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroup()); }
(rule__RuleDeclaration__Group__0)
{ after(grammarAccess.getRuleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarTypeSpecifier
entryRuleVarTypeSpecifier 
:
{ before(grammarAccess.getVarTypeSpecifierRule()); }
	 ruleVarTypeSpecifier
{ after(grammarAccess.getVarTypeSpecifierRule()); } 
	 EOF 
;

// Rule VarTypeSpecifier
ruleVarTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarTypeSpecifierAccess().getAlternatives()); }
(rule__VarTypeSpecifier__Alternatives)
{ after(grammarAccess.getVarTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlock
entryRuleBlock 
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockAccess().getGroup()); }
(rule__Block__Group__0)
{ after(grammarAccess.getBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDeclarationOrStatement
entryRuleVarDeclarationOrStatement 
:
{ before(grammarAccess.getVarDeclarationOrStatementRule()); }
	 ruleVarDeclarationOrStatement
{ after(grammarAccess.getVarDeclarationOrStatementRule()); } 
	 EOF 
;

// Rule VarDeclarationOrStatement
ruleVarDeclarationOrStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getAlternatives()); }
(rule__VarDeclarationOrStatement__Alternatives)
{ after(grammarAccess.getVarDeclarationOrStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatementOrBlock
entryRuleStatementOrBlock 
:
{ before(grammarAccess.getStatementOrBlockRule()); }
	 ruleStatementOrBlock
{ after(grammarAccess.getStatementOrBlockRule()); } 
	 EOF 
;

// Rule StatementOrBlock
ruleStatementOrBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementOrBlockAccess().getAlternatives()); }
(rule__StatementOrBlock__Alternatives)
{ after(grammarAccess.getStatementOrBlockAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement 
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStatementAccess().getAlternatives()); }
(rule__ExpressionStatement__Alternatives)
{ after(grammarAccess.getExpressionStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostfixStatement
entryRulePostfixStatement 
:
{ before(grammarAccess.getPostfixStatementRule()); }
	 rulePostfixStatement
{ after(grammarAccess.getPostfixStatementRule()); } 
	 EOF 
;

// Rule PostfixStatement
rulePostfixStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostfixStatementAccess().getGroup()); }
(rule__PostfixStatement__Group__0)
{ after(grammarAccess.getPostfixStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfElseStatement
entryRuleIfElseStatement 
:
{ before(grammarAccess.getIfElseStatementRule()); }
	 ruleIfElseStatement
{ after(grammarAccess.getIfElseStatementRule()); } 
	 EOF 
;

// Rule IfElseStatement
ruleIfElseStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfElseStatementAccess().getGroup()); }
(rule__IfElseStatement__Group__0)
{ after(grammarAccess.getIfElseStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhileStatement
entryRuleWhileStatement 
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
(rule__WhileStatement__Group__0)
{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForStatement
entryRuleForStatement 
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForStatementAccess().getGroup()); }
(rule__ForStatement__Group__0)
{ after(grammarAccess.getForStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement 
:
{ before(grammarAccess.getSwitchStatementRule()); }
	 ruleSwitchStatement
{ after(grammarAccess.getSwitchStatementRule()); } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchStatementAccess().getGroup()); }
(rule__SwitchStatement__Group__0)
{ after(grammarAccess.getSwitchStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchCase
entryRuleSwitchCase 
:
{ before(grammarAccess.getSwitchCaseRule()); }
	 ruleSwitchCase
{ after(grammarAccess.getSwitchCaseRule()); } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchCaseAccess().getGroup()); }
(rule__SwitchCase__Group__0)
{ after(grammarAccess.getSwitchCaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSwitchDefault
entryRuleSwitchDefault 
:
{ before(grammarAccess.getSwitchDefaultRule()); }
	 ruleSwitchDefault
{ after(grammarAccess.getSwitchDefaultRule()); } 
	 EOF 
;

// Rule SwitchDefault
ruleSwitchDefault
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchDefaultAccess().getGroup()); }
(rule__SwitchDefault__Group__0)
{ after(grammarAccess.getSwitchDefaultAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReturnStatement
entryRuleReturnStatement 
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
(rule__ReturnStatement__Group__0)
{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleContinueStatement
entryRuleContinueStatement 
:
{ before(grammarAccess.getContinueStatementRule()); }
	 ruleContinueStatement
{ after(grammarAccess.getContinueStatementRule()); } 
	 EOF 
;

// Rule ContinueStatement
ruleContinueStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getContinueStatementAccess().getGroup()); }
(rule__ContinueStatement__Group__0)
{ after(grammarAccess.getContinueStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBreakStatement
entryRuleBreakStatement 
:
{ before(grammarAccess.getBreakStatementRule()); }
	 ruleBreakStatement
{ after(grammarAccess.getBreakStatementRule()); } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBreakStatementAccess().getGroup()); }
(rule__BreakStatement__Group__0)
{ after(grammarAccess.getBreakStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePostFixOp
entryRulePostFixOp 
:
{ before(grammarAccess.getPostFixOpRule()); }
	 rulePostFixOp
{ after(grammarAccess.getPostFixOpRule()); } 
	 EOF 
;

// Rule PostFixOp
rulePostFixOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPostFixOpAccess().getAlternatives()); }
(rule__PostFixOp__Alternatives)
{ after(grammarAccess.getPostFixOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssign
entryRuleAssign 
:
{ before(grammarAccess.getAssignRule()); }
	 ruleAssign
{ after(grammarAccess.getAssignRule()); } 
	 EOF 
;

// Rule Assign
ruleAssign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignAccess().getGroup()); }
(rule__Assign__Group__0)
{ after(grammarAccess.getAssignAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression 
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup()); }
(rule__SimpleExpression__Group__0)
{ after(grammarAccess.getSimpleExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndExpression
entryRuleAndExpression 
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
(rule__AndExpression__Group__0)
{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqualsExpression
entryRuleEqualsExpression 
:
{ before(grammarAccess.getEqualsExpressionRule()); }
	 ruleEqualsExpression
{ after(grammarAccess.getEqualsExpressionRule()); } 
	 EOF 
;

// Rule EqualsExpression
ruleEqualsExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualsExpressionAccess().getGroup()); }
(rule__EqualsExpression__Group__0)
{ after(grammarAccess.getEqualsExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEqOp
entryRuleEqOp 
:
{ before(grammarAccess.getEqOpRule()); }
	 ruleEqOp
{ after(grammarAccess.getEqOpRule()); } 
	 EOF 
;

// Rule EqOp
ruleEqOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqOpAccess().getAlternatives()); }
(rule__EqOp__Alternatives)
{ after(grammarAccess.getEqOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparisonExpression
entryRuleComparisonExpression 
:
{ before(grammarAccess.getComparisonExpressionRule()); }
	 ruleComparisonExpression
{ after(grammarAccess.getComparisonExpressionRule()); } 
	 EOF 
;

// Rule ComparisonExpression
ruleComparisonExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup()); }
(rule__ComparisonExpression__Group__0)
{ after(grammarAccess.getComparisonExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRelOp
entryRuleRelOp 
:
{ before(grammarAccess.getRelOpRule()); }
	 ruleRelOp
{ after(grammarAccess.getRelOpRule()); } 
	 EOF 
;

// Rule RelOp
ruleRelOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelOpAccess().getAlternatives()); }
(rule__RelOp__Alternatives)
{ after(grammarAccess.getRelOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAdditiveExpression
entryRuleAdditiveExpression 
:
{ before(grammarAccess.getAdditiveExpressionRule()); }
	 ruleAdditiveExpression
{ after(grammarAccess.getAdditiveExpressionRule()); } 
	 EOF 
;

// Rule AdditiveExpression
ruleAdditiveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
(rule__AdditiveExpression__Group__0)
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAddOp
entryRuleAddOp 
:
{ before(grammarAccess.getAddOpRule()); }
	 ruleAddOp
{ after(grammarAccess.getAddOpRule()); } 
	 EOF 
;

// Rule AddOp
ruleAddOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAddOpAccess().getAlternatives()); }
(rule__AddOp__Alternatives)
{ after(grammarAccess.getAddOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression 
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
(rule__MultiplicativeExpression__Group__0)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMulOp
entryRuleMulOp 
:
{ before(grammarAccess.getMulOpRule()); }
	 ruleMulOp
{ after(grammarAccess.getMulOpRule()); } 
	 EOF 
;

// Rule MulOp
ruleMulOp
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMulOpAccess().getAlternatives()); }
(rule__MulOp__Alternatives)
{ after(grammarAccess.getMulOpAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAtom
entryRuleAtom 
:
{ before(grammarAccess.getAtomRule()); }
	 ruleAtom
{ after(grammarAccess.getAtomRule()); } 
	 EOF 
;

// Rule Atom
ruleAtom
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAtomAccess().getAlternatives()); }
(rule__Atom__Alternatives)
{ after(grammarAccess.getAtomAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCall
entryRuleCall 
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCallAccess().getGroup()); }
(rule__Call__Group__0)
{ after(grammarAccess.getCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVar
entryRuleVar 
:
{ before(grammarAccess.getVarRule()); }
	 ruleVar
{ after(grammarAccess.getVarRule()); } 
	 EOF 
;

// Rule Var
ruleVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarAccess().getGroup()); }
(rule__Var__Group__0)
{ after(grammarAccess.getVarAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralOrVar
entryRuleLiteralOrVar 
:
{ before(grammarAccess.getLiteralOrVarRule()); }
	 ruleLiteralOrVar
{ after(grammarAccess.getLiteralOrVarRule()); } 
	 EOF 
;

// Rule LiteralOrVar
ruleLiteralOrVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralOrVarAccess().getAlternatives()); }
(rule__LiteralOrVar__Alternatives)
{ after(grammarAccess.getLiteralOrVarAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralNumOrVar
entryRuleLiteralNumOrVar 
:
{ before(grammarAccess.getLiteralNumOrVarRule()); }
	 ruleLiteralNumOrVar
{ after(grammarAccess.getLiteralNumOrVarRule()); } 
	 EOF 
;

// Rule LiteralNumOrVar
ruleLiteralNumOrVar
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralNumOrVarAccess().getAlternatives()); }
(rule__LiteralNumOrVar__Alternatives)
{ after(grammarAccess.getLiteralNumOrVarAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralNum
entryRuleLiteralNum 
:
{ before(grammarAccess.getLiteralNumRule()); }
	 ruleLiteralNum
{ after(grammarAccess.getLiteralNumRule()); } 
	 EOF 
;

// Rule LiteralNum
ruleLiteralNum
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralNumAccess().getAlternatives()); }
(rule__LiteralNum__Alternatives)
{ after(grammarAccess.getLiteralNumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVector
entryRuleVector 
:
{ before(grammarAccess.getVectorRule()); }
	 ruleVector
{ after(grammarAccess.getVectorRule()); } 
	 EOF 
;

// Rule Vector
ruleVector
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorAccess().getGroup()); }
(rule__Vector__Group__0)
{ after(grammarAccess.getVectorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIntType
entryRuleIntType 
:
{ before(grammarAccess.getIntTypeRule()); }
	 ruleIntType
{ after(grammarAccess.getIntTypeRule()); } 
	 EOF 
;

// Rule IntType
ruleIntType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIntTypeAccess().getGroup()); }
(rule__IntType__Group__0)
{ after(grammarAccess.getIntTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatType
entryRuleFloatType 
:
{ before(grammarAccess.getFloatTypeRule()); }
	 ruleFloatType
{ after(grammarAccess.getFloatTypeRule()); } 
	 EOF 
;

// Rule FloatType
ruleFloatType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatTypeAccess().getGroup()); }
(rule__FloatType__Group__0)
{ after(grammarAccess.getFloatTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolType
entryRuleBoolType 
:
{ before(grammarAccess.getBoolTypeRule()); }
	 ruleBoolType
{ after(grammarAccess.getBoolTypeRule()); } 
	 EOF 
;

// Rule BoolType
ruleBoolType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolTypeAccess().getGroup()); }
(rule__BoolType__Group__0)
{ after(grammarAccess.getBoolTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVectorType
entryRuleVectorType 
:
{ before(grammarAccess.getVectorTypeRule()); }
	 ruleVectorType
{ after(grammarAccess.getVectorTypeRule()); } 
	 EOF 
;

// Rule VectorType
ruleVectorType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVectorTypeAccess().getGroup()); }
(rule__VectorType__Group__0)
{ after(grammarAccess.getVectorTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringType
entryRuleStringType 
:
{ before(grammarAccess.getStringTypeRule()); }
	 ruleStringType
{ after(grammarAccess.getStringTypeRule()); } 
	 EOF 
;

// Rule StringType
ruleStringType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringTypeAccess().getGroup()); }
(rule__StringType__Group__0)
{ after(grammarAccess.getStringTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVoidType
entryRuleVoidType 
:
{ before(grammarAccess.getVoidTypeRule()); }
	 ruleVoidType
{ after(grammarAccess.getVoidTypeRule()); } 
	 EOF 
;

// Rule VoidType
ruleVoidType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVoidTypeAccess().getGroup()); }
(rule__VoidType__Group__0)
{ after(grammarAccess.getVoidTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSign
entryRuleSign 
:
{ before(grammarAccess.getSignRule()); }
	 ruleSign
{ after(grammarAccess.getSignRule()); } 
	 EOF 
;

// Rule Sign
ruleSign
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignAccess().getHyphenMinusKeyword()); }

	'-' 

{ after(grammarAccess.getSignAccess().getHyphenMinusKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedInt
entryRuleSignedInt 
:
{ before(grammarAccess.getSignedIntRule()); }
	 ruleSignedInt
{ after(grammarAccess.getSignedIntRule()); } 
	 EOF 
;

// Rule SignedInt
ruleSignedInt
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedIntAccess().getGroup()); }
(rule__SignedInt__Group__0)
{ after(grammarAccess.getSignedIntAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSignedFloat
entryRuleSignedFloat 
:
{ before(grammarAccess.getSignedFloatRule()); }
	 ruleSignedFloat
{ after(grammarAccess.getSignedFloatRule()); } 
	 EOF 
;

// Rule SignedFloat
ruleSignedFloat
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSignedFloatAccess().getGroup()); }
(rule__SignedFloat__Group__0)
{ after(grammarAccess.getSignedFloatAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBool
entryRuleBool 
:
{ before(grammarAccess.getBoolRule()); }
	 ruleBool
{ after(grammarAccess.getBoolRule()); } 
	 EOF 
;

// Rule Bool
ruleBool
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolAccess().getAlternatives()); }
(rule__Bool__Alternatives)
{ after(grammarAccess.getBoolAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getGlobalVarDeclarationParserRuleCall_0()); }
	ruleGlobalVarDeclaration
{ after(grammarAccess.getDeclarationAccess().getGlobalVarDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_1()); }
	ruleFunctionDeclaration
{ after(grammarAccess.getDeclarationAccess().getFunctionDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getIncludeDeclarationParserRuleCall_2()); }
	ruleIncludeDeclaration
{ after(grammarAccess.getDeclarationAccess().getIncludeDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getPseudoIncludeDeclarationParserRuleCall_3()); }
	rulePseudoIncludeDeclaration
{ after(grammarAccess.getDeclarationAccess().getPseudoIncludeDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getRuleDeclarationParserRuleCall_4()); }
	ruleRuleDeclaration
{ after(grammarAccess.getDeclarationAccess().getRuleDeclarationParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Alternatives_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getVoidKeyword_5_0()); }
(
	'void' 
)?
{ after(grammarAccess.getFunctionDeclarationAccess().getVoidKeyword_5_0()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1()); }
(rule__FunctionDeclaration__Group_5_1__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTypeSpecifierAccess().getVoidTypeParserRuleCall_0()); }
	ruleVoidType
{ after(grammarAccess.getFunctionTypeSpecifierAccess().getVoidTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFunctionTypeSpecifierAccess().getVarTypeSpecifierParserRuleCall_1()); }
	ruleVarTypeSpecifier
{ after(grammarAccess.getFunctionTypeSpecifierAccess().getVarTypeSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Alternatives_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getActiveAssignment_3_0_0()); }
(rule__RuleDeclaration__ActiveAssignment_3_0_0)
{ after(grammarAccess.getRuleDeclarationAccess().getActiveAssignment_3_0_0()); }
)

    |(
{ before(grammarAccess.getRuleDeclarationAccess().getInactiveKeyword_3_0_1()); }

	'inactive' 

{ after(grammarAccess.getRuleDeclarationAccess().getInactiveKeyword_3_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarTypeSpecifierAccess().getIntTypeParserRuleCall_0()); }
	ruleIntType
{ after(grammarAccess.getVarTypeSpecifierAccess().getIntTypeParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getFloatTypeParserRuleCall_1()); }
	ruleFloatType
{ after(grammarAccess.getVarTypeSpecifierAccess().getFloatTypeParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getBoolTypeParserRuleCall_2()); }
	ruleBoolType
{ after(grammarAccess.getVarTypeSpecifierAccess().getBoolTypeParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getVectorTypeParserRuleCall_3()); }
	ruleVectorType
{ after(grammarAccess.getVarTypeSpecifierAccess().getVectorTypeParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getVarTypeSpecifierAccess().getStringTypeParserRuleCall_4()); }
	ruleStringType
{ after(grammarAccess.getVarTypeSpecifierAccess().getStringTypeParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclarationOrStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getLocalVarDeclarationParserRuleCall_0()); }
	ruleLocalVarDeclaration
{ after(grammarAccess.getVarDeclarationOrStatementAccess().getLocalVarDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getVarDeclarationOrStatementAccess().getStatementParserRuleCall_1()); }
	ruleStatement
{ after(grammarAccess.getVarDeclarationOrStatementAccess().getStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StatementOrBlock__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementOrBlockAccess().getStatementParserRuleCall_0()); }
	ruleStatement
{ after(grammarAccess.getStatementOrBlockAccess().getStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementOrBlockAccess().getBlockParserRuleCall_1()); }
	ruleBlock
{ after(grammarAccess.getStatementOrBlockAccess().getBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_0()); }
	ruleExpressionStatement
{ after(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getPostfixStatementParserRuleCall_1()); }
	rulePostfixStatement
{ after(grammarAccess.getStatementAccess().getPostfixStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIfElseStatementParserRuleCall_2()); }
	ruleIfElseStatement
{ after(grammarAccess.getStatementAccess().getIfElseStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); }
	ruleWhileStatement
{ after(grammarAccess.getStatementAccess().getWhileStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); }
	ruleForStatement
{ after(grammarAccess.getStatementAccess().getForStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_5()); }
	ruleSwitchStatement
{ after(grammarAccess.getStatementAccess().getSwitchStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); }
	ruleReturnStatement
{ after(grammarAccess.getStatementAccess().getReturnStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); }
	ruleContinueStatement
{ after(grammarAccess.getStatementAccess().getContinueStatementParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); }
	ruleBreakStatement
{ after(grammarAccess.getStatementAccess().getBreakStatementParserRuleCall_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
(rule__ExpressionStatement__Group_0__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
(rule__ExpressionStatement__Group_1__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getValueAssignment_2_0()); }
(rule__SwitchCase__ValueAssignment_2_0)
{ after(grammarAccess.getSwitchCaseAccess().getValueAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getSwitchCaseAccess().getGroup_2_1()); }
(rule__SwitchCase__Group_2_1__0)
{ after(grammarAccess.getSwitchCaseAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostFixOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostFixOpAccess().getPlusSignPlusSignKeyword_0()); }

	'++' 

{ after(grammarAccess.getPostFixOpAccess().getPlusSignPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getPostFixOpAccess().getHyphenMinusHyphenMinusKeyword_1()); }

	'--' 

{ after(grammarAccess.getPostFixOpAccess().getHyphenMinusHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getAssignParserRuleCall_0()); }
	ruleAssign
{ after(grammarAccess.getExpressionAccess().getAssignParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_1()); }
	ruleSimpleExpression
{ after(grammarAccess.getExpressionAccess().getSimpleExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqOpAccess().getEqualsSignEqualsSignKeyword_0()); }

	'==' 

{ after(grammarAccess.getEqOpAccess().getEqualsSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getEqOpAccess().getExclamationMarkEqualsSignKeyword_1()); }

	'!=' 

{ after(grammarAccess.getEqOpAccess().getExclamationMarkEqualsSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RelOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRelOpAccess().getLessThanSignEqualsSignKeyword_0()); }

	'<=' 

{ after(grammarAccess.getRelOpAccess().getLessThanSignEqualsSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getRelOpAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getRelOpAccess().getLessThanSignKeyword_1()); }
)

    |(
{ before(grammarAccess.getRelOpAccess().getGreaterThanSignKeyword_2()); }

	'>' 

{ after(grammarAccess.getRelOpAccess().getGreaterThanSignKeyword_2()); }
)

    |(
{ before(grammarAccess.getRelOpAccess().getGreaterThanSignEqualsSignKeyword_3()); }

	'>=' 

{ after(grammarAccess.getRelOpAccess().getGreaterThanSignEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AddOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAddOpAccess().getPlusSignKeyword_0()); }

	'+' 

{ after(grammarAccess.getAddOpAccess().getPlusSignKeyword_0()); }
)

    |(
{ before(grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1()); }

	'-' 

{ after(grammarAccess.getAddOpAccess().getHyphenMinusKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulOp__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOpAccess().getAsteriskKeyword_0()); }

	'*' 

{ after(grammarAccess.getMulOpAccess().getAsteriskKeyword_0()); }
)

    |(
{ before(grammarAccess.getMulOpAccess().getSolidusKeyword_1()); }

	'/' 

{ after(grammarAccess.getMulOpAccess().getSolidusKeyword_1()); }
)

    |(
{ before(grammarAccess.getMulOpAccess().getPercentSignKeyword_2()); }

	'%' 

{ after(grammarAccess.getMulOpAccess().getPercentSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getGroup_0()); }
(rule__Atom__Group_0__0)
{ after(grammarAccess.getAtomAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getCallParserRuleCall_1()); }
	ruleCall
{ after(grammarAccess.getAtomAccess().getCallParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getLiteralParserRuleCall_2()); }
	ruleLiteral
{ after(grammarAccess.getAtomAccess().getLiteralParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getAtomAccess().getVarParserRuleCall_3()); }
	ruleVar
{ after(grammarAccess.getAtomAccess().getVarParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOrVar__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOrVarAccess().getLiteralParserRuleCall_0()); }
	ruleLiteral
{ after(grammarAccess.getLiteralOrVarAccess().getLiteralParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralOrVarAccess().getVarParserRuleCall_1()); }
	ruleVar
{ after(grammarAccess.getLiteralOrVarAccess().getVarParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNumOrVar__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumOrVarAccess().getLiteralNumParserRuleCall_0()); }
	ruleLiteralNum
{ after(grammarAccess.getLiteralNumOrVarAccess().getLiteralNumParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralNumOrVarAccess().getVarParserRuleCall_1()); }
	ruleVar
{ after(grammarAccess.getLiteralNumOrVarAccess().getVarParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getLiteralNumParserRuleCall_0()); }
	ruleLiteralNum
{ after(grammarAccess.getLiteralAccess().getLiteralNumParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getVectorParserRuleCall_1()); }
	ruleVector
{ after(grammarAccess.getLiteralAccess().getVectorParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_2()); }
(rule__Literal__Group_2__0)
{ after(grammarAccess.getLiteralAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getGroup_0()); }
(rule__LiteralNum__Group_0__0)
{ after(grammarAccess.getLiteralNumAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLiteralNumAccess().getGroup_1()); }
(rule__LiteralNum__Group_1__0)
{ after(grammarAccess.getLiteralNumAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getLiteralNumAccess().getGroup_2()); }
(rule__LiteralNum__Group_2__0)
{ after(grammarAccess.getLiteralNumAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Bool__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBoolAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBoolAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBoolAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
(

)
{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getDeclarationsAssignment_1()); }
(rule__Program__DeclarationsAssignment_1)*
{ after(grammarAccess.getProgramAccess().getDeclarationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IncludeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDeclaration__Group__0__Impl
	rule__IncludeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getIncludeDeclarationAction_0()); }
(

)
{ after(grammarAccess.getIncludeDeclarationAccess().getIncludeDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDeclaration__Group__1__Impl
	rule__IncludeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_1()); }

	'include' 

{ after(grammarAccess.getIncludeDeclarationAccess().getIncludeKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDeclaration__Group__2__Impl
	rule__IncludeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getFilePathAssignment_2()); }
(rule__IncludeDeclaration__FilePathAssignment_2)
{ after(grammarAccess.getIncludeDeclarationAccess().getFilePathAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IncludeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IncludeDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getIncludeDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__PseudoIncludeDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PseudoIncludeDeclaration__Group__0__Impl
	rule__PseudoIncludeDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoIncludeDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPseudoIncludeDeclarationAccess().getIncludeDeclarationAction_0()); }
(

)
{ after(grammarAccess.getPseudoIncludeDeclarationAccess().getIncludeDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PseudoIncludeDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PseudoIncludeDeclaration__Group__1__Impl
	rule__PseudoIncludeDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoIncludeDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPseudoIncludeDeclarationAccess().getPSEUDO_PRECOMPILERTerminalRuleCall_1()); }
	RULE_PSEUDO_PRECOMPILER
{ after(grammarAccess.getPseudoIncludeDeclarationAccess().getPSEUDO_PRECOMPILERTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PseudoIncludeDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PseudoIncludeDeclaration__Group__2__Impl
	rule__PseudoIncludeDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoIncludeDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPseudoIncludeDeclarationAccess().getIncludeKeyword_2()); }

	'include' 

{ after(grammarAccess.getPseudoIncludeDeclarationAccess().getIncludeKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PseudoIncludeDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PseudoIncludeDeclaration__Group__3__Impl
	rule__PseudoIncludeDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoIncludeDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPseudoIncludeDeclarationAccess().getFilePathAssignment_3()); }
(rule__PseudoIncludeDeclaration__FilePathAssignment_3)
{ after(grammarAccess.getPseudoIncludeDeclarationAccess().getFilePathAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PseudoIncludeDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PseudoIncludeDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoIncludeDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPseudoIncludeDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getPseudoIncludeDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LocalVarDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVarDeclaration__Group__0__Impl
	rule__LocalVarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getLocalVarDeclarationAction_0()); }
(

)
{ after(grammarAccess.getLocalVarDeclarationAccess().getLocalVarDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVarDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVarDeclaration__Group__1__Impl
	rule__LocalVarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getTypeAssignment_1()); }
(rule__LocalVarDeclaration__TypeAssignment_1)
{ after(grammarAccess.getLocalVarDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVarDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVarDeclaration__Group__2__Impl
	rule__LocalVarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getNameAssignment_2()); }
(rule__LocalVarDeclaration__NameAssignment_2)
{ after(grammarAccess.getLocalVarDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVarDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVarDeclaration__Group__3__Impl
	rule__LocalVarDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getLocalVarDeclarationAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVarDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVarDeclaration__Group__4__Impl
	rule__LocalVarDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getValueAssignment_4()); }
(rule__LocalVarDeclaration__ValueAssignment_4)
{ after(grammarAccess.getLocalVarDeclarationAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVarDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LocalVarDeclaration__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getLocalVarDeclarationAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__GlobalVarDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__Group__0__Impl
	rule__GlobalVarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getGlobalVarDeclarationAction_0()); }
(

)
{ after(grammarAccess.getGlobalVarDeclarationAccess().getGlobalVarDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__Group__1__Impl
	rule__GlobalVarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1()); }
(rule__GlobalVarDeclaration__UnorderedGroup_1)
{ after(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__Group__2__Impl
	rule__GlobalVarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getTypeAssignment_2()); }
(rule__GlobalVarDeclaration__TypeAssignment_2)
{ after(grammarAccess.getGlobalVarDeclarationAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__Group__3__Impl
	rule__GlobalVarDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getNameAssignment_3()); }
(rule__GlobalVarDeclaration__NameAssignment_3)
{ after(grammarAccess.getGlobalVarDeclarationAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__Group__4__Impl
	rule__GlobalVarDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getEqualsSignKeyword_4()); }

	'=' 

{ after(grammarAccess.getGlobalVarDeclarationAccess().getEqualsSignKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__Group__5__Impl
	rule__GlobalVarDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getValueAssignment_5()); }
(rule__GlobalVarDeclaration__ValueAssignment_5)
{ after(grammarAccess.getGlobalVarDeclarationAccess().getValueAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getGlobalVarDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
(

)
{ after(grammarAccess.getParameterDeclarationAccess().getParameterDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
	rule__ParameterDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_1()); }
(rule__ParameterDeclaration__TypeAssignment_1)
{ after(grammarAccess.getParameterDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__2__Impl
	rule__ParameterDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameAssignment_2()); }
(rule__ParameterDeclaration__NameAssignment_2)
{ after(grammarAccess.getParameterDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__3__Impl
	rule__ParameterDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getEqualsSignKeyword_3()); }

	'=' 

{ after(grammarAccess.getParameterDeclarationAccess().getEqualsSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getValueAssignment_4()); }
(rule__ParameterDeclaration__ValueAssignment_4)
{ after(grammarAccess.getParameterDeclarationAccess().getValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ForVarDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForVarDeclaration__Group__0__Impl
	rule__ForVarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getForVarDeclarationAction_0()); }
(

)
{ after(grammarAccess.getForVarDeclarationAccess().getForVarDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForVarDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForVarDeclaration__Group__1__Impl
	rule__ForVarDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getNameAssignment_1()); }
(rule__ForVarDeclaration__NameAssignment_1)
{ after(grammarAccess.getForVarDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForVarDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForVarDeclaration__Group__2__Impl
	rule__ForVarDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getForVarDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForVarDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForVarDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getValueAssignment_3()); }
(rule__ForVarDeclaration__ValueAssignment_3)
{ after(grammarAccess.getForVarDeclarationAccess().getValueAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
(

)
{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getMutableAssignment_1()); }
(rule__FunctionDeclaration__MutableAssignment_1)?
{ after(grammarAccess.getFunctionDeclarationAccess().getMutableAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_2()); }
(rule__FunctionDeclaration__TypeAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
(rule__FunctionDeclaration__NameAssignment_3)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getAlternatives_5()); }
(rule__FunctionDeclaration__Alternatives_5)
{ after(grammarAccess.getFunctionDeclarationAccess().getAlternatives_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__6__Impl
	rule__FunctionDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_7()); }
(rule__FunctionDeclaration__BodyAssignment_7)
{ after(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__FunctionDeclaration__Group_5_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1__0__Impl
	rule__FunctionDeclaration__Group_5_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_5_1_0()); }
(rule__FunctionDeclaration__ParametersAssignment_5_1_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_5_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1_1()); }
(rule__FunctionDeclaration__Group_5_1_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_5_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1_1__0__Impl
	rule__FunctionDeclaration__Group_5_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_5_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_5_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_5_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_5_1_1_1()); }
(rule__FunctionDeclaration__ParametersAssignment_5_1_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_5_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__0__Impl
	rule__RuleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getRuleDeclarationAction_0()); }
(

)
{ after(grammarAccess.getRuleDeclarationAccess().getRuleDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__1__Impl
	rule__RuleDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getRuleKeyword_1()); }

	'rule' 

{ after(grammarAccess.getRuleDeclarationAccess().getRuleKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__2__Impl
	rule__RuleDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getNameAssignment_2()); }
(rule__RuleDeclaration__NameAssignment_2)
{ after(grammarAccess.getRuleDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__3__Impl
	rule__RuleDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3()); }
(rule__RuleDeclaration__UnorderedGroup_3)
{ after(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getBodyAssignment_4()); }
(rule__RuleDeclaration__BodyAssignment_4)
{ after(grammarAccess.getRuleDeclarationAccess().getBodyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__RuleDeclaration__Group_3_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_3__0__Impl
	rule__RuleDeclaration__Group_3_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroupKeyword_3_3_0()); }

	'group' 

{ after(grammarAccess.getRuleDeclarationAccess().getGroupKeyword_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_3_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroupAssignment_3_3_1()); }
(rule__RuleDeclaration__GroupAssignment_3_3_1)
{ after(grammarAccess.getRuleDeclarationAccess().getGroupAssignment_3_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group_3_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_4__0__Impl
	rule__RuleDeclaration__Group_3_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMinIntervalKeyword_3_4_0()); }

	'minInterval' 

{ after(grammarAccess.getRuleDeclarationAccess().getMinIntervalKeyword_3_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_3_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMinIntervalAssignment_3_4_1()); }
(rule__RuleDeclaration__MinIntervalAssignment_3_4_1)
{ after(grammarAccess.getRuleDeclarationAccess().getMinIntervalAssignment_3_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group_3_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_5__0__Impl
	rule__RuleDeclaration__Group_3_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMaxIntervalKeyword_3_5_0()); }

	'maxInterval' 

{ after(grammarAccess.getRuleDeclarationAccess().getMaxIntervalKeyword_3_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_3_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMaxIntervalAssignment_3_5_1()); }
(rule__RuleDeclaration__MaxIntervalAssignment_3_5_1)
{ after(grammarAccess.getRuleDeclarationAccess().getMaxIntervalAssignment_3_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__Group_3_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_6__0__Impl
	rule__RuleDeclaration__Group_3_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getPriorityKeyword_3_6_0()); }

	'priority' 

{ after(grammarAccess.getRuleDeclarationAccess().getPriorityKeyword_3_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__Group_3_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__Group_3_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__Group_3_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getPriorityAssignment_3_6_1()); }
(rule__RuleDeclaration__PriorityAssignment_3_6_1)
{ after(grammarAccess.getRuleDeclarationAccess().getPriorityAssignment_3_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Block__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
(

)
{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getContentsAssignment_2()); }
(rule__Block__ContentsAssignment_2)*
{ after(grammarAccess.getBlockAccess().getContentsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ExpressionStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__0__Impl
	rule__ExpressionStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getCallParserRuleCall_0_0()); }
	ruleCall
{ after(grammarAccess.getExpressionStatementAccess().getCallParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_1()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__0__Impl
	rule__ExpressionStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getAssignParserRuleCall_1_0()); }
	ruleAssign
{ after(grammarAccess.getExpressionStatementAccess().getAssignParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PostfixStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixStatement__Group__0__Impl
	rule__PostfixStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixStatementAccess().getPostfixStatementAction_0()); }
(

)
{ after(grammarAccess.getPostfixStatementAccess().getPostfixStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixStatement__Group__1__Impl
	rule__PostfixStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixStatementAccess().getVarAssignment_1()); }
(rule__PostfixStatement__VarAssignment_1)
{ after(grammarAccess.getPostfixStatementAccess().getVarAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixStatement__Group__2__Impl
	rule__PostfixStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixStatementAccess().getOpAssignment_2()); }
(rule__PostfixStatement__OpAssignment_2)
{ after(grammarAccess.getPostfixStatementAccess().getOpAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PostfixStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PostfixStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getPostfixStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfElseStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__0__Impl
	rule__IfElseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getIfElseStatementAction_0()); }
(

)
{ after(grammarAccess.getIfElseStatementAccess().getIfElseStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__1__Impl
	rule__IfElseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getIfKeyword_1()); }

	'if' 

{ after(grammarAccess.getIfElseStatementAccess().getIfKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__2__Impl
	rule__IfElseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getIfElseStatementAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__3__Impl
	rule__IfElseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getConditionAssignment_3()); }
(rule__IfElseStatement__ConditionAssignment_3)
{ after(grammarAccess.getIfElseStatementAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__4__Impl
	rule__IfElseStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getIfElseStatementAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__5__Impl
	rule__IfElseStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getThenStatementAssignment_5()); }
(rule__IfElseStatement__ThenStatementAssignment_5)
{ after(grammarAccess.getIfElseStatementAccess().getThenStatementAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getGroup_6()); }
(rule__IfElseStatement__Group_6__0)?
{ after(grammarAccess.getIfElseStatementAccess().getGroup_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IfElseStatement__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group_6__0__Impl
	rule__IfElseStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getElseKeyword_6_0()); }
(
	'else' 
)
{ after(grammarAccess.getIfElseStatementAccess().getElseKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfElseStatement__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfElseStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getElseStatementAssignment_6_1()); }
(rule__IfElseStatement__ElseStatementAssignment_6_1)
{ after(grammarAccess.getIfElseStatementAccess().getElseStatementAssignment_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhileStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
(

)
{ after(grammarAccess.getWhileStatementAccess().getWhileStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }

	'while' 

{ after(grammarAccess.getWhileStatementAccess().getWhileKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionAssignment_3()); }
(rule__WhileStatement__ConditionAssignment_3)
{ after(grammarAccess.getWhileStatementAccess().getConditionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__4__Impl
	rule__WhileStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhileStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getStatementAssignment_5()); }
(rule__WhileStatement__StatementAssignment_5)
{ after(grammarAccess.getWhileStatementAccess().getStatementAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__ForStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getForStatementAction_0()); }
(

)
{ after(grammarAccess.getForStatementAccess().getForStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getForKeyword_1()); }

	'for' 

{ after(grammarAccess.getForStatementAccess().getForKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getVarAssignment_3()); }
(rule__ForStatement__VarAssignment_3)
{ after(grammarAccess.getForStatementAccess().getVarAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__4__Impl
	rule__ForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getForStatementAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__5__Impl
	rule__ForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getOpAssignment_5()); }
(rule__ForStatement__OpAssignment_5)
{ after(grammarAccess.getForStatementAccess().getOpAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__6__Impl
	rule__ForStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getEndAssignment_6()); }
(rule__ForStatement__EndAssignment_6)
{ after(grammarAccess.getForStatementAccess().getEndAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__7__Impl
	rule__ForStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ForStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getStatementAssignment_8()); }
(rule__ForStatement__StatementAssignment_8)
{ after(grammarAccess.getForStatementAccess().getStatementAssignment_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__SwitchStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__0__Impl
	rule__SwitchStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getSwitchStatementAction_0()); }
(

)
{ after(grammarAccess.getSwitchStatementAccess().getSwitchStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__1__Impl
	rule__SwitchStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_1()); }

	'switch' 

{ after(grammarAccess.getSwitchStatementAccess().getSwitchKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__2__Impl
	rule__SwitchStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__3__Impl
	rule__SwitchStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getExpressionAssignment_3()); }
(rule__SwitchStatement__ExpressionAssignment_3)
{ after(grammarAccess.getSwitchStatementAccess().getExpressionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__4__Impl
	rule__SwitchStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__5__Impl
	rule__SwitchStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_5()); }

	'{' 

{ after(grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__6__Impl
	rule__SwitchStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getCasesAssignment_6()); }
(rule__SwitchStatement__CasesAssignment_6)*
{ after(grammarAccess.getSwitchStatementAccess().getCasesAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__7__Impl
	rule__SwitchStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getDefaultAssignment_7()); }
(rule__SwitchStatement__DefaultAssignment_7)?
{ after(grammarAccess.getSwitchStatementAccess().getDefaultAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStatement__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchStatement__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__SwitchCase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__0__Impl
	rule__SwitchCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getSwitchCaseAction_0()); }
(

)
{ after(grammarAccess.getSwitchCaseAccess().getSwitchCaseAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__1__Impl
	rule__SwitchCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getCaseKeyword_1()); }

	'case' 

{ after(grammarAccess.getSwitchCaseAccess().getCaseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__2__Impl
	rule__SwitchCase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getAlternatives_2()); }
(rule__SwitchCase__Alternatives_2)
{ after(grammarAccess.getSwitchCaseAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__3__Impl
	rule__SwitchCase__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getColonKeyword_3()); }

	':' 

{ after(grammarAccess.getSwitchCaseAccess().getColonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getStatementAssignment_4()); }
(rule__SwitchCase__StatementAssignment_4)
{ after(grammarAccess.getSwitchCaseAccess().getStatementAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SwitchCase__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group_2_1__0__Impl
	rule__SwitchCase__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getLeftParenthesisKeyword_2_1_0()); }

	'(' 

{ after(grammarAccess.getSwitchCaseAccess().getLeftParenthesisKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group_2_1__1__Impl
	rule__SwitchCase__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getValueAssignment_2_1_1()); }
(rule__SwitchCase__ValueAssignment_2_1_1)
{ after(grammarAccess.getSwitchCaseAccess().getValueAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchCase__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getRightParenthesisKeyword_2_1_2()); }

	')' 

{ after(grammarAccess.getSwitchCaseAccess().getRightParenthesisKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SwitchDefault__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__0__Impl
	rule__SwitchDefault__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getSwitchDefaultAction_0()); }
(

)
{ after(grammarAccess.getSwitchDefaultAccess().getSwitchDefaultAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchDefault__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__1__Impl
	rule__SwitchDefault__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getDefaultKeyword_1()); }

	'default' 

{ after(grammarAccess.getSwitchDefaultAccess().getDefaultKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchDefault__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__2__Impl
	rule__SwitchDefault__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getColonKeyword_2()); }

	':' 

{ after(grammarAccess.getSwitchDefaultAccess().getColonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchDefault__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SwitchDefault__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getStatementAssignment_3()); }
(rule__SwitchDefault__StatementAssignment_3)
{ after(grammarAccess.getSwitchDefaultAccess().getStatementAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ReturnStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
(

)
{ after(grammarAccess.getReturnStatementAccess().getReturnStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }

	'return' 

{ after(grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__2__Impl
	rule__ReturnStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getGroup_2()); }
(rule__ReturnStatement__Group_2__0)?
{ after(grammarAccess.getReturnStatementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getReturnStatementAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ReturnStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_2__0__Impl
	rule__ReturnStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getLeftParenthesisKeyword_2_0()); }

	'(' 

{ after(grammarAccess.getReturnStatementAccess().getLeftParenthesisKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_2__1__Impl
	rule__ReturnStatement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2_1()); }
(rule__ReturnStatement__ExpressionAssignment_2_1)
{ after(grammarAccess.getReturnStatementAccess().getExpressionAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReturnStatement__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getReturnStatementAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ContinueStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__0__Impl
	rule__ContinueStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
(

)
{ after(grammarAccess.getContinueStatementAccess().getContinueStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__1__Impl
	rule__ContinueStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); }

	'continue' 

{ after(grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ContinueStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ContinueStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ContinueStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getContinueStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BreakStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__0__Impl
	rule__BreakStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
(

)
{ after(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__1__Impl
	rule__BreakStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); }

	'break' 

{ after(grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BreakStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getBreakStatementAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Assign__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__0__Impl
	rule__Assign__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getAssignAction_0()); }
(

)
{ after(grammarAccess.getAssignAccess().getAssignAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getGroup_1()); }
(rule__Assign__Group_1__0)
{ after(grammarAccess.getAssignAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Assign__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group_1__0__Impl
	rule__Assign__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getVarAssignment_1_0()); }
(rule__Assign__VarAssignment_1_0)
{ after(grammarAccess.getAssignAccess().getVarAssignment_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group_1__1__Impl
	rule__Assign__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getEqualsSignKeyword_1_1()); }

	'=' 

{ after(grammarAccess.getAssignAccess().getEqualsSignKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Assign__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Assign__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getExpressionAssignment_1_2()); }
(rule__Assign__ExpressionAssignment_1_2)
{ after(grammarAccess.getAssignAccess().getExpressionAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group__0__Impl
	rule__SimpleExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
{ after(grammarAccess.getSimpleExpressionAccess().getAndExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
(rule__SimpleExpression__Group_1__0)*
{ after(grammarAccess.getSimpleExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__0__Impl
	rule__SimpleExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOrExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getSimpleExpressionAccess().getOrExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__1__Impl
	rule__SimpleExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOpAssignment_1_1()); }
(rule__SimpleExpression__OpAssignment_1_1)
{ after(grammarAccess.getSimpleExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightAssignment_1_2()); }
(rule__SimpleExpression__RightAssignment_1_2)
{ after(grammarAccess.getSimpleExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AndExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getEqualsExpressionParserRuleCall_0()); }
	ruleEqualsExpression
{ after(grammarAccess.getAndExpressionAccess().getEqualsExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
(rule__AndExpression__Group_1__0)*
{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
(rule__AndExpression__OpAssignment_1_1)
{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
(rule__AndExpression__RightAssignment_1_2)
{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EqualsExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group__0__Impl
	rule__EqualsExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
	ruleComparisonExpression
{ after(grammarAccess.getEqualsExpressionAccess().getComparisonExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getGroup_1()); }
(rule__EqualsExpression__Group_1__0)?
{ after(grammarAccess.getEqualsExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EqualsExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group_1__0__Impl
	rule__EqualsExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getEqualsExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getEqualsExpressionAccess().getEqualsExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group_1__1__Impl
	rule__EqualsExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getOpAssignment_1_1()); }
(rule__EqualsExpression__OpAssignment_1_1)
{ after(grammarAccess.getEqualsExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EqualsExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EqualsExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getRightAssignment_1_2()); }
(rule__EqualsExpression__RightAssignment_1_2)
{ after(grammarAccess.getEqualsExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ComparisonExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__0__Impl
	rule__ComparisonExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
	ruleAdditiveExpression
{ after(grammarAccess.getComparisonExpressionAccess().getAdditiveExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
(rule__ComparisonExpression__Group_1__0)?
{ after(grammarAccess.getComparisonExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ComparisonExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__0__Impl
	rule__ComparisonExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonExpressionAccess().getComparisonExpressionLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__1__Impl
	rule__ComparisonExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1()); }
(rule__ComparisonExpression__OpAssignment_1_1)
{ after(grammarAccess.getComparisonExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ComparisonExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ComparisonExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
(rule__ComparisonExpression__RightAssignment_1_2)
{ after(grammarAccess.getComparisonExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AdditiveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__0__Impl
	rule__AdditiveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
{ after(grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
(rule__AdditiveExpression__Group_1__0)*
{ after(grammarAccess.getAdditiveExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AdditiveExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__0__Impl
	rule__AdditiveExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getTermLeftAction_1_0()); }
(

)
{ after(grammarAccess.getAdditiveExpressionAccess().getTermLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__1__Impl
	rule__AdditiveExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
(rule__AdditiveExpression__OpAssignment_1_1)
{ after(grammarAccess.getAdditiveExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AdditiveExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AdditiveExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
(rule__AdditiveExpression__RightAssignment_1_2)
{ after(grammarAccess.getAdditiveExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MultiplicativeExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getAtomParserRuleCall_0()); }
	ruleAtom
{ after(grammarAccess.getMultiplicativeExpressionAccess().getAtomParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
(rule__MultiplicativeExpression__Group_1__0)*
{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MultiplicativeExpression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getFactorLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getFactorLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__1__Impl
	rule__MultiplicativeExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
(rule__MultiplicativeExpression__OpAssignment_1_1)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MultiplicativeExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
(rule__MultiplicativeExpression__RightAssignment_1_2)
{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Atom__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0__0__Impl
	rule__Atom__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_0_0()); }

	'(' 

{ after(grammarAccess.getAtomAccess().getLeftParenthesisKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0__1__Impl
	rule__Atom__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getExpressionParserRuleCall_0_1()); }
	ruleExpression
{ after(grammarAccess.getAtomAccess().getExpressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Atom__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Atom__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Atom__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAtomAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getAtomAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Call__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getCallAction_0()); }
(

)
{ after(grammarAccess.getCallAccess().getCallAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getFunctionAssignment_1()); }
(rule__Call__FunctionAssignment_1)
{ after(grammarAccess.getCallAccess().getFunctionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getGroup_3()); }
(rule__Call__Group_3__0)?
{ after(grammarAccess.getCallAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Call__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_3__0__Impl
	rule__Call__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getArgumentsAssignment_3_0()); }
(rule__Call__ArgumentsAssignment_3_0)
{ after(grammarAccess.getCallAccess().getArgumentsAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getGroup_3_1()); }
(rule__Call__Group_3_1__0)*
{ after(grammarAccess.getCallAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Call__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_3_1__0__Impl
	rule__Call__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getCommaKeyword_3_1_0()); }

	',' 

{ after(grammarAccess.getCallAccess().getCommaKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Call__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getArgumentsAssignment_3_1_1()); }
(rule__Call__ArgumentsAssignment_3_1_1)
{ after(grammarAccess.getCallAccess().getArgumentsAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Var__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Var__Group__0__Impl
	rule__Var__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccess().getVarAction_0()); }
(

)
{ after(grammarAccess.getVarAccess().getVarAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Var__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Var__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Var__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccess().getDeclarationAssignment_1()); }
(rule__Var__DeclarationAssignment_1)
{ after(grammarAccess.getVarAccess().getDeclarationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Literal__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__0__Impl
	rule__Literal__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getLiteralStringAction_2_0()); }
(

)
{ after(grammarAccess.getLiteralAccess().getLiteralStringAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueAssignment_2_1()); }
(rule__Literal__ValueAssignment_2_1)
{ after(grammarAccess.getLiteralAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralNum__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralNum__Group_0__0__Impl
	rule__LiteralNum__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getLiteralIntAction_0_0()); }
(

)
{ after(grammarAccess.getLiteralNumAccess().getLiteralIntAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralNum__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralNum__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getValueAssignment_0_1()); }
(rule__LiteralNum__ValueAssignment_0_1)
{ after(grammarAccess.getLiteralNumAccess().getValueAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralNum__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralNum__Group_1__0__Impl
	rule__LiteralNum__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getLiteralFloatAction_1_0()); }
(

)
{ after(grammarAccess.getLiteralNumAccess().getLiteralFloatAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralNum__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralNum__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getValueAssignment_1_1()); }
(rule__LiteralNum__ValueAssignment_1_1)
{ after(grammarAccess.getLiteralNumAccess().getValueAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LiteralNum__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralNum__Group_2__0__Impl
	rule__LiteralNum__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getLiteralBoolAction_2_0()); }
(

)
{ after(grammarAccess.getLiteralNumAccess().getLiteralBoolAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralNum__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralNum__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getValueAssignment_2_1()); }
(rule__LiteralNum__ValueAssignment_2_1)
{ after(grammarAccess.getLiteralNumAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vector__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__0__Impl
	rule__Vector__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getVectorLiteralAction_0()); }
(

)
{ after(grammarAccess.getVectorAccess().getVectorLiteralAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__1__Impl
	rule__Vector__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getVectorKeyword_1()); }

	'vector' 

{ after(grammarAccess.getVectorAccess().getVectorKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__2__Impl
	rule__Vector__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_2()); }

	'(' 

{ after(grammarAccess.getVectorAccess().getLeftParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__3__Impl
	rule__Vector__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getXAssignment_3()); }
(rule__Vector__XAssignment_3)
{ after(grammarAccess.getVectorAccess().getXAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__4__Impl
	rule__Vector__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getVectorAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__5__Impl
	rule__Vector__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getYAssignment_5()); }
(rule__Vector__YAssignment_5)
{ after(grammarAccess.getVectorAccess().getYAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__6__Impl
	rule__Vector__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getCommaKeyword_6()); }

	',' 

{ after(grammarAccess.getVectorAccess().getCommaKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__7__Impl
	rule__Vector__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getZAssignment_7()); }
(rule__Vector__ZAssignment_7)
{ after(grammarAccess.getVectorAccess().getZAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vector__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vector__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getRightParenthesisKeyword_8()); }

	')' 

{ after(grammarAccess.getVectorAccess().getRightParenthesisKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__IntType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntType__Group__0__Impl
	rule__IntType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntTypeAccess().getIntTypeAction_0()); }
(

)
{ after(grammarAccess.getIntTypeAccess().getIntTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IntType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IntType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }

	'int' 

{ after(grammarAccess.getIntTypeAccess().getIntKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FloatType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatType__Group__0__Impl
	rule__FloatType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatTypeAccess().getFloatTypeAction_0()); }
(

)
{ after(grammarAccess.getFloatTypeAccess().getFloatTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FloatType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FloatType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FloatType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatTypeAccess().getFloatKeyword_1()); }

	'float' 

{ after(grammarAccess.getFloatTypeAccess().getFloatKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BoolType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__0__Impl
	rule__BoolType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
(

)
{ after(grammarAccess.getBoolTypeAccess().getBoolTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BoolType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BoolType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BoolType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }

	'bool' 

{ after(grammarAccess.getBoolTypeAccess().getBoolKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VectorType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorType__Group__0__Impl
	rule__VectorType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorTypeAccess().getVectorTypeAction_0()); }
(

)
{ after(grammarAccess.getVectorTypeAccess().getVectorTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VectorType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VectorType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VectorType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorTypeAccess().getVectorKeyword_1()); }

	'vector' 

{ after(grammarAccess.getVectorTypeAccess().getVectorKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__StringType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__0__Impl
	rule__StringType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
(

)
{ after(grammarAccess.getStringTypeAccess().getStringTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StringType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StringType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StringType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringTypeAccess().getStringKeyword_1()); }

	'string' 

{ after(grammarAccess.getStringTypeAccess().getStringKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__VoidType__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VoidType__Group__0__Impl
	rule__VoidType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidType__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVoidTypeAccess().getVoidTypeAction_0()); }
(

)
{ after(grammarAccess.getVoidTypeAccess().getVoidTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VoidType__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VoidType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VoidType__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVoidTypeAccess().getVoidKeyword_1()); }

	'void' 

{ after(grammarAccess.getVoidTypeAccess().getVoidKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedInt__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__0__Impl
	rule__SignedInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getSignParserRuleCall_0()); }
(	ruleSign)?
{ after(grammarAccess.getSignedIntAccess().getSignParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedInt__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedInt__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getSignedIntAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SignedFloat__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__0__Impl
	rule__SignedFloat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getSignParserRuleCall_0()); }
(	ruleSign)?
{ after(grammarAccess.getSignedFloatAccess().getSignParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFloat__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__1__Impl
	rule__SignedFloat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFloat__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__2__Impl
	rule__SignedFloat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getSignedFloatAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SignedFloat__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SignedFloat__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SignedFloat__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getSignedFloatAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__GlobalVarDeclaration__UnorderedGroup_1
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1());
    }
:
	rule__GlobalVarDeclaration__UnorderedGroup_1__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__UnorderedGroup_1__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getGlobalVarDeclarationAccess().getConstAssignment_1_0()); }
						(rule__GlobalVarDeclaration__ConstAssignment_1_0)
						{ after(grammarAccess.getGlobalVarDeclarationAccess().getConstAssignment_1_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getGlobalVarDeclarationAccess().getExternAssignment_1_1()); }
						(rule__GlobalVarDeclaration__ExternAssignment_1_1)
						{ after(grammarAccess.getGlobalVarDeclarationAccess().getExternAssignment_1_1()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getGlobalVarDeclarationAccess().getUnorderedGroup_1());
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__UnorderedGroup_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__UnorderedGroup_1__Impl
	rule__GlobalVarDeclaration__UnorderedGroup_1__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVarDeclaration__UnorderedGroup_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GlobalVarDeclaration__UnorderedGroup_1__Impl
;
finally {
	restoreStackSize(stackSize);
}






rule__RuleDeclaration__UnorderedGroup_3
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3());
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__0
	
	{getUnorderedGroupHelper().canLeave(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3())}?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getAlternatives_3_0()); }
						(rule__RuleDeclaration__Alternatives_3_0)
						{ after(grammarAccess.getRuleDeclarationAccess().getAlternatives_3_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyAssignment_3_1()); }
						(rule__RuleDeclaration__RunImmediatelyAssignment_3_1)
						{ after(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyAssignment_3_1()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 2);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getHighFrequencyAssignment_3_2()); }
						(rule__RuleDeclaration__HighFrequencyAssignment_3_2)
						{ after(grammarAccess.getRuleDeclarationAccess().getHighFrequencyAssignment_3_2()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 3)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 3);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getGroup_3_3()); }
						(rule__RuleDeclaration__Group_3_3__0)
						{ after(grammarAccess.getRuleDeclarationAccess().getGroup_3_3()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 4)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 4);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getGroup_3_4()); }
						(rule__RuleDeclaration__Group_3_4__0)
						{ after(grammarAccess.getRuleDeclarationAccess().getGroup_3_4()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 5)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 5);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getGroup_3_5()); }
						(rule__RuleDeclaration__Group_3_5__0)
						{ after(grammarAccess.getRuleDeclarationAccess().getGroup_3_5()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 6)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3(), 6);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getRuleDeclarationAccess().getGroup_3_6()); }
						(rule__RuleDeclaration__Group_3_6__0)
						{ after(grammarAccess.getRuleDeclarationAccess().getGroup_3_6()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getRuleDeclarationAccess().getUnorderedGroup_3());
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__Impl
	rule__RuleDeclaration__UnorderedGroup_3__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__Impl
	rule__RuleDeclaration__UnorderedGroup_3__2?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__Impl
	rule__RuleDeclaration__UnorderedGroup_3__3?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__Impl
	rule__RuleDeclaration__UnorderedGroup_3__4?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__Impl
	rule__RuleDeclaration__UnorderedGroup_3__5?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__Impl
	rule__RuleDeclaration__UnorderedGroup_3__6?
;
finally {
	restoreStackSize(stackSize);
}


rule__RuleDeclaration__UnorderedGroup_3__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleDeclaration__UnorderedGroup_3__Impl
;
finally {
	restoreStackSize(stackSize);
}
















rule__Program__DeclarationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
	ruleDeclaration{ after(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IncludeDeclaration__FilePathAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIncludeDeclarationAccess().getFilePathSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getIncludeDeclarationAccess().getFilePathSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PseudoIncludeDeclaration__FilePathAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPseudoIncludeDeclarationAccess().getFilePathSTRINGTerminalRuleCall_3_0()); }
	RULE_STRING{ after(grammarAccess.getPseudoIncludeDeclarationAccess().getFilePathSTRINGTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_1_0()); }
	ruleVarTypeSpecifier{ after(grammarAccess.getLocalVarDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getLocalVarDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVarDeclaration__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLocalVarDeclarationAccess().getValueExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getLocalVarDeclarationAccess().getValueExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__ConstAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getConstConstKeyword_1_0_0()); }
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getConstConstKeyword_1_0_0()); }

	'const' 

{ after(grammarAccess.getGlobalVarDeclarationAccess().getConstConstKeyword_1_0_0()); }
)

{ after(grammarAccess.getGlobalVarDeclarationAccess().getConstConstKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__ExternAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getExternExternKeyword_1_1_0()); }
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getExternExternKeyword_1_1_0()); }

	'extern' 

{ after(grammarAccess.getGlobalVarDeclarationAccess().getExternExternKeyword_1_1_0()); }
)

{ after(grammarAccess.getGlobalVarDeclarationAccess().getExternExternKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_2_0()); }
	ruleVarTypeSpecifier{ after(grammarAccess.getGlobalVarDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getGlobalVarDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVarDeclaration__ValueAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGlobalVarDeclarationAccess().getValueLiteralOrVarParserRuleCall_5_0()); }
	ruleLiteralOrVar{ after(grammarAccess.getGlobalVarDeclarationAccess().getValueLiteralOrVarParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_1_0()); }
	ruleVarTypeSpecifier{ after(grammarAccess.getParameterDeclarationAccess().getTypeVarTypeSpecifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getParameterDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__ValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getValueLiteralOrVarParserRuleCall_4_0()); }
	ruleLiteralOrVar{ after(grammarAccess.getParameterDeclarationAccess().getValueLiteralOrVarParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getForVarDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForVarDeclaration__ValueAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForVarDeclarationAccess().getValueExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getForVarDeclarationAccess().getValueExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__MutableAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getMutableMutableKeyword_1_0()); }
(
{ before(grammarAccess.getFunctionDeclarationAccess().getMutableMutableKeyword_1_0()); }

	'mutable' 

{ after(grammarAccess.getFunctionDeclarationAccess().getMutableMutableKeyword_1_0()); }
)

{ after(grammarAccess.getFunctionDeclarationAccess().getMutableMutableKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__TypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeFunctionTypeSpecifierParserRuleCall_2_0()); }
	ruleFunctionTypeSpecifier{ after(grammarAccess.getFunctionDeclarationAccess().getTypeFunctionTypeSpecifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_5_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersParameterDeclarationParserRuleCall_5_1_0_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getParametersParameterDeclarationParserRuleCall_5_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParametersAssignment_5_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParametersParameterDeclarationParserRuleCall_5_1_1_1_0()); }
	ruleParameterDeclaration{ after(grammarAccess.getFunctionDeclarationAccess().getParametersParameterDeclarationParserRuleCall_5_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__BodyAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_7_0()); }
	ruleBlock{ after(grammarAccess.getFunctionDeclarationAccess().getBodyBlockParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getRuleDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__ActiveAssignment_3_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getActiveActiveKeyword_3_0_0_0()); }
(
{ before(grammarAccess.getRuleDeclarationAccess().getActiveActiveKeyword_3_0_0_0()); }

	'active' 

{ after(grammarAccess.getRuleDeclarationAccess().getActiveActiveKeyword_3_0_0_0()); }
)

{ after(grammarAccess.getRuleDeclarationAccess().getActiveActiveKeyword_3_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__RunImmediatelyAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_3_1_0()); }
(
{ before(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_3_1_0()); }

	'runImmediately' 

{ after(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_3_1_0()); }
)

{ after(grammarAccess.getRuleDeclarationAccess().getRunImmediatelyRunImmediatelyKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__HighFrequencyAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_3_2_0()); }
(
{ before(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_3_2_0()); }

	'highFrequency' 

{ after(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_3_2_0()); }
)

{ after(grammarAccess.getRuleDeclarationAccess().getHighFrequencyHighFrequencyKeyword_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__GroupAssignment_3_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getGroupIDTerminalRuleCall_3_3_1_0()); }
	RULE_ID{ after(grammarAccess.getRuleDeclarationAccess().getGroupIDTerminalRuleCall_3_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__MinIntervalAssignment_3_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMinIntervalINTTerminalRuleCall_3_4_1_0()); }
	RULE_INT{ after(grammarAccess.getRuleDeclarationAccess().getMinIntervalINTTerminalRuleCall_3_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__MaxIntervalAssignment_3_5_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getMaxIntervalINTTerminalRuleCall_3_5_1_0()); }
	RULE_INT{ after(grammarAccess.getRuleDeclarationAccess().getMaxIntervalINTTerminalRuleCall_3_5_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__PriorityAssignment_3_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getPriorityINTTerminalRuleCall_3_6_1_0()); }
	RULE_INT{ after(grammarAccess.getRuleDeclarationAccess().getPriorityINTTerminalRuleCall_3_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleDeclaration__BodyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleDeclarationAccess().getBodyBlockParserRuleCall_4_0()); }
	ruleBlock{ after(grammarAccess.getRuleDeclarationAccess().getBodyBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block__ContentsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockAccess().getContentsVarDeclarationOrStatementParserRuleCall_2_0()); }
	ruleVarDeclarationOrStatement{ after(grammarAccess.getBlockAccess().getContentsVarDeclarationOrStatementParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixStatement__VarAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixStatementAccess().getVarVarDeclarationCrossReference_1_0()); }
(
{ before(grammarAccess.getPostfixStatementAccess().getVarVarDeclarationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getPostfixStatementAccess().getVarVarDeclarationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getPostfixStatementAccess().getVarVarDeclarationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PostfixStatement__OpAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPostfixStatementAccess().getOpPostFixOpParserRuleCall_2_0()); }
	rulePostFixOp{ after(grammarAccess.getPostfixStatementAccess().getOpPostFixOpParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getConditionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getIfElseStatementAccess().getConditionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__ThenStatementAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getThenStatementStatementOrBlockParserRuleCall_5_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getIfElseStatementAccess().getThenStatementStatementOrBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfElseStatement__ElseStatementAssignment_6_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfElseStatementAccess().getElseStatementStatementOrBlockParserRuleCall_6_1_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getIfElseStatementAccess().getElseStatementStatementOrBlockParserRuleCall_6_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__ConditionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getWhileStatementAccess().getConditionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__StatementAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhileStatementAccess().getStatementStatementOrBlockParserRuleCall_5_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getWhileStatementAccess().getStatementStatementOrBlockParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__VarAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getVarForVarDeclarationParserRuleCall_3_0()); }
	ruleForVarDeclaration{ after(grammarAccess.getForStatementAccess().getVarForVarDeclarationParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__OpAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getOpRelOpParserRuleCall_5_0()); }
	ruleRelOp{ after(grammarAccess.getForStatementAccess().getOpRelOpParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__EndAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getEndExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getForStatementAccess().getEndExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__StatementAssignment_8
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForStatementAccess().getStatementStatementOrBlockParserRuleCall_8_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getForStatementAccess().getStatementStatementOrBlockParserRuleCall_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__ExpressionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
	ruleExpression{ after(grammarAccess.getSwitchStatementAccess().getExpressionExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__CasesAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getCasesSwitchCaseParserRuleCall_6_0()); }
	ruleSwitchCase{ after(grammarAccess.getSwitchStatementAccess().getCasesSwitchCaseParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStatement__DefaultAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchStatementAccess().getDefaultSwitchDefaultParserRuleCall_7_0()); }
	ruleSwitchDefault{ after(grammarAccess.getSwitchStatementAccess().getDefaultSwitchDefaultParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__ValueAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getValueLiteralNumOrVarParserRuleCall_2_0_0()); }
	ruleLiteralNumOrVar{ after(grammarAccess.getSwitchCaseAccess().getValueLiteralNumOrVarParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__ValueAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getValueLiteralNumOrVarParserRuleCall_2_1_1_0()); }
	ruleLiteralNumOrVar{ after(grammarAccess.getSwitchCaseAccess().getValueLiteralNumOrVarParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__StatementAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchCaseAccess().getStatementStatementOrBlockParserRuleCall_4_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getSwitchCaseAccess().getStatementStatementOrBlockParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchDefault__StatementAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchDefaultAccess().getStatementStatementOrBlockParserRuleCall_3_0()); }
	ruleStatementOrBlock{ after(grammarAccess.getSwitchDefaultAccess().getStatementStatementOrBlockParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExpressionAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
	ruleExpression{ after(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__VarAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getVarVarParserRuleCall_1_0_0()); }
	ruleVar{ after(grammarAccess.getAssignAccess().getVarVarParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Assign__ExpressionAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAssignAccess().getExpressionExpressionParserRuleCall_1_2_0()); }
	ruleExpression{ after(grammarAccess.getAssignAccess().getExpressionExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
(
{ before(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }

	'||' 

{ after(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
)

{ after(grammarAccess.getSimpleExpressionAccess().getOpVerticalLineVerticalLineKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	ruleAndExpression{ after(grammarAccess.getSimpleExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
(
{ before(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }

	'&&' 

{ after(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
)

{ after(grammarAccess.getAndExpressionAccess().getOpAmpersandAmpersandKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndExpressionAccess().getRightEqualsExpressionParserRuleCall_1_2_0()); }
	ruleEqualsExpression{ after(grammarAccess.getAndExpressionAccess().getRightEqualsExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getOpEqOpParserRuleCall_1_1_0()); }
	ruleEqOp{ after(grammarAccess.getEqualsExpressionAccess().getOpEqOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EqualsExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualsExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
	ruleComparisonExpression{ after(grammarAccess.getEqualsExpressionAccess().getRightComparisonExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getOpRelOpParserRuleCall_1_1_0()); }
	ruleRelOp{ after(grammarAccess.getComparisonExpressionAccess().getOpRelOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ComparisonExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
	ruleAdditiveExpression{ after(grammarAccess.getComparisonExpressionAccess().getRightAdditiveExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getOpAddOpParserRuleCall_1_1_0()); }
	ruleAddOp{ after(grammarAccess.getAdditiveExpressionAccess().getOpAddOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AdditiveExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
	ruleMultiplicativeExpression{ after(grammarAccess.getAdditiveExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpMulOpParserRuleCall_1_1_0()); }
	ruleMulOp{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpMulOpParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAtomParserRuleCall_1_2_0()); }
	ruleAtom{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAtomParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__FunctionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getFunctionFunctionDeclarationCrossReference_1_0()); }
(
{ before(grammarAccess.getCallAccess().getFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getCallAccess().getFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getCallAccess().getFunctionFunctionDeclarationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ArgumentsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getArgumentsExpressionParserRuleCall_3_0_0()); }
	ruleExpression{ after(grammarAccess.getCallAccess().getArgumentsExpressionParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Call__ArgumentsAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCallAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); }
	ruleExpression{ after(grammarAccess.getCallAccess().getArgumentsExpressionParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Var__DeclarationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarAccess().getDeclarationVarDeclarationCrossReference_1_0()); }
(
{ before(grammarAccess.getVarAccess().getDeclarationVarDeclarationIDTerminalRuleCall_1_0_1()); }
	RULE_ID{ after(grammarAccess.getVarAccess().getDeclarationVarDeclarationIDTerminalRuleCall_1_0_1()); }
)
{ after(grammarAccess.getVarAccess().getDeclarationVarDeclarationCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
	RULE_STRING{ after(grammarAccess.getLiteralAccess().getValueSTRINGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__ValueAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getValueSignedIntParserRuleCall_0_1_0()); }
	ruleSignedInt{ after(grammarAccess.getLiteralNumAccess().getValueSignedIntParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__ValueAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getValueSignedFloatParserRuleCall_1_1_0()); }
	ruleSignedFloat{ after(grammarAccess.getLiteralNumAccess().getValueSignedFloatParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralNum__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralNumAccess().getValueBoolParserRuleCall_2_1_0()); }
	ruleBool{ after(grammarAccess.getLiteralNumAccess().getValueBoolParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__XAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getXLiteralNumOrVarParserRuleCall_3_0()); }
	ruleLiteralNumOrVar{ after(grammarAccess.getVectorAccess().getXLiteralNumOrVarParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__YAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getYLiteralNumOrVarParserRuleCall_5_0()); }
	ruleLiteralNumOrVar{ after(grammarAccess.getVectorAccess().getYLiteralNumOrVarParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vector__ZAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVectorAccess().getZLiteralNumOrVarParserRuleCall_7_0()); }
	ruleLiteralNumOrVar{ after(grammarAccess.getVectorAccess().getZLiteralNumOrVarParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : '"' ('\\"'|~(('"'|'\n')))* '"';

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_PSEUDO_PRECOMPILER : '//#';

RULE_SL_COMMENT : '//' (~(('\n'|'\r'|'#')) ~(('\n'|'\r'))*)? ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


