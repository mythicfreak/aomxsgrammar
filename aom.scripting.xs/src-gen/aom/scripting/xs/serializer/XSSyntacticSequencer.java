/*
 * generated by Xtext
 */
package aom.scripting.xs.serializer;

import aom.scripting.xs.services.XSGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class XSSyntacticSequencer extends AbstractSyntacticSequencer {

	protected XSGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Atom_LeftParenthesisKeyword_0_0_a;
	protected AbstractElementAlias match_Atom_LeftParenthesisKeyword_0_0_p;
	protected AbstractElementAlias match_FunctionDeclaration_VoidKeyword_5_0_q;
	protected AbstractElementAlias match_RuleDeclaration_InactiveKeyword_3_0_1_a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (XSGrammarAccess) access;
		match_Atom_LeftParenthesisKeyword_0_0_a = new TokenAlias(true, true, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_0_0());
		match_Atom_LeftParenthesisKeyword_0_0_p = new TokenAlias(true, false, grammarAccess.getAtomAccess().getLeftParenthesisKeyword_0_0());
		match_FunctionDeclaration_VoidKeyword_5_0_q = new TokenAlias(false, true, grammarAccess.getFunctionDeclarationAccess().getVoidKeyword_5_0());
		match_RuleDeclaration_InactiveKeyword_3_0_1_a = new TokenAlias(true, true, grammarAccess.getRuleDeclarationAccess().getInactiveKeyword_3_0_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getPSEUDO_PRECOMPILERRule())
			return getPSEUDO_PRECOMPILERToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal PSEUDO_PRECOMPILER:
	 * 	'//#';
	 */
	protected String getPSEUDO_PRECOMPILERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "//#";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Atom_LeftParenthesisKeyword_0_0_a.equals(syntax))
				emit_Atom_LeftParenthesisKeyword_0_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Atom_LeftParenthesisKeyword_0_0_p.equals(syntax))
				emit_Atom_LeftParenthesisKeyword_0_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FunctionDeclaration_VoidKeyword_5_0_q.equals(syntax))
				emit_FunctionDeclaration_VoidKeyword_5_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_RuleDeclaration_InactiveKeyword_3_0_1_a.equals(syntax))
				emit_RuleDeclaration_InactiveKeyword_3_0_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     '('*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'vector' '(' x=LiteralNumOrVar
	 *     (rule start) (ambiguity) declaration=[VarDeclaration|ID]
	 *     (rule start) (ambiguity) function=[FunctionDeclaration|ID]
	 *     (rule start) (ambiguity) value=Bool
	 *     (rule start) (ambiguity) value=STRING
	 *     (rule start) (ambiguity) value=SignedFloat
	 *     (rule start) (ambiguity) value=SignedInt
	 *     (rule start) (ambiguity) var=Var
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {ComparisonExpression.left=}
	 *     (rule start) (ambiguity) {EqualsExpression.left=}
	 *     (rule start) (ambiguity) {Factor.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {Term.left=}
	 */
	protected void emit_Atom_LeftParenthesisKeyword_0_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '('+
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) var=Var
	 *     (rule start) (ambiguity) {AndExpression.left=}
	 *     (rule start) (ambiguity) {ComparisonExpression.left=}
	 *     (rule start) (ambiguity) {EqualsExpression.left=}
	 *     (rule start) (ambiguity) {Factor.left=}
	 *     (rule start) (ambiguity) {OrExpression.left=}
	 *     (rule start) (ambiguity) {Term.left=}
	 */
	protected void emit_Atom_LeftParenthesisKeyword_0_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'void'?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID '(' (ambiguity) ')' body=Block
	 */
	protected void emit_FunctionDeclaration_VoidKeyword_5_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'inactive'*
	 *
	 * This ambiguous syntax occurs at:
	 *     active?='active' (ambiguity) 'group' group=ID
	 *     active?='active' (ambiguity) 'maxInterval' maxInterval=INT
	 *     active?='active' (ambiguity) 'minInterval' minInterval=INT
	 *     active?='active' (ambiguity) 'priority' priority=INT
	 *     active?='active' (ambiguity) active?='active'
	 *     active?='active' (ambiguity) body=Block
	 *     active?='active' (ambiguity) highFrequency?='highFrequency'
	 *     active?='active' (ambiguity) runImmediately?='runImmediately'
	 *     group=ID (ambiguity) 'group' group=ID
	 *     group=ID (ambiguity) 'maxInterval' maxInterval=INT
	 *     group=ID (ambiguity) 'minInterval' minInterval=INT
	 *     group=ID (ambiguity) 'priority' priority=INT
	 *     group=ID (ambiguity) active?='active'
	 *     group=ID (ambiguity) body=Block
	 *     group=ID (ambiguity) highFrequency?='highFrequency'
	 *     group=ID (ambiguity) runImmediately?='runImmediately'
	 *     highFrequency?='highFrequency' (ambiguity) 'group' group=ID
	 *     highFrequency?='highFrequency' (ambiguity) 'maxInterval' maxInterval=INT
	 *     highFrequency?='highFrequency' (ambiguity) 'minInterval' minInterval=INT
	 *     highFrequency?='highFrequency' (ambiguity) 'priority' priority=INT
	 *     highFrequency?='highFrequency' (ambiguity) active?='active'
	 *     highFrequency?='highFrequency' (ambiguity) body=Block
	 *     highFrequency?='highFrequency' (ambiguity) highFrequency?='highFrequency'
	 *     highFrequency?='highFrequency' (ambiguity) runImmediately?='runImmediately'
	 *     maxInterval=INT (ambiguity) 'group' group=ID
	 *     maxInterval=INT (ambiguity) 'maxInterval' maxInterval=INT
	 *     maxInterval=INT (ambiguity) 'minInterval' minInterval=INT
	 *     maxInterval=INT (ambiguity) 'priority' priority=INT
	 *     maxInterval=INT (ambiguity) active?='active'
	 *     maxInterval=INT (ambiguity) body=Block
	 *     maxInterval=INT (ambiguity) highFrequency?='highFrequency'
	 *     maxInterval=INT (ambiguity) runImmediately?='runImmediately'
	 *     minInterval=INT (ambiguity) 'group' group=ID
	 *     minInterval=INT (ambiguity) 'maxInterval' maxInterval=INT
	 *     minInterval=INT (ambiguity) 'minInterval' minInterval=INT
	 *     minInterval=INT (ambiguity) 'priority' priority=INT
	 *     minInterval=INT (ambiguity) active?='active'
	 *     minInterval=INT (ambiguity) body=Block
	 *     minInterval=INT (ambiguity) highFrequency?='highFrequency'
	 *     minInterval=INT (ambiguity) runImmediately?='runImmediately'
	 *     name=ID (ambiguity) 'group' group=ID
	 *     name=ID (ambiguity) 'maxInterval' maxInterval=INT
	 *     name=ID (ambiguity) 'minInterval' minInterval=INT
	 *     name=ID (ambiguity) 'priority' priority=INT
	 *     name=ID (ambiguity) active?='active'
	 *     name=ID (ambiguity) body=Block
	 *     name=ID (ambiguity) highFrequency?='highFrequency'
	 *     name=ID (ambiguity) runImmediately?='runImmediately'
	 *     priority=INT (ambiguity) 'group' group=ID
	 *     priority=INT (ambiguity) 'maxInterval' maxInterval=INT
	 *     priority=INT (ambiguity) 'minInterval' minInterval=INT
	 *     priority=INT (ambiguity) 'priority' priority=INT
	 *     priority=INT (ambiguity) active?='active'
	 *     priority=INT (ambiguity) body=Block
	 *     priority=INT (ambiguity) highFrequency?='highFrequency'
	 *     priority=INT (ambiguity) runImmediately?='runImmediately'
	 *     runImmediately?='runImmediately' (ambiguity) 'group' group=ID
	 *     runImmediately?='runImmediately' (ambiguity) 'maxInterval' maxInterval=INT
	 *     runImmediately?='runImmediately' (ambiguity) 'minInterval' minInterval=INT
	 *     runImmediately?='runImmediately' (ambiguity) 'priority' priority=INT
	 *     runImmediately?='runImmediately' (ambiguity) active?='active'
	 *     runImmediately?='runImmediately' (ambiguity) body=Block
	 *     runImmediately?='runImmediately' (ambiguity) highFrequency?='highFrequency'
	 *     runImmediately?='runImmediately' (ambiguity) runImmediately?='runImmediately'
	 */
	protected void emit_RuleDeclaration_InactiveKeyword_3_0_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
