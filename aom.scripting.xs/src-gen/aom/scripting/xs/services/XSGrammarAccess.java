/*
 * generated by Xtext
 */
package aom.scripting.xs.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class XSGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_1_0 = (RuleCall)cDeclarationsAssignment_1.eContents().get(0);
		
		/// *
		//  * NOT supported by XS
		//  * - power a^n
		//  * - ternary b ? x : y;
		//  * - prefix: ++i
		//  * - inline pre/postfix: a + x++
		//  * - unary minus: -x 
		//  * - XOR (^)
		//  * - negation (!)
		//  * - long, double?
		//  * - bitwise and/or
		//  * - +=, -=, ...
		//  * 
		//  * other notes:
		//  *  - operator precedence is weird
		//  *  - only three scopes: global, file, local; file scope is only used for non-exported global variables
		//  *  - return() requires parentheses (except if not returning anything), and is optional
		//  *  - function arguments require default values
		//  *  - vector() only works for constant arguments
		//  *  - functions must be defined before they are used like in C, forward declarations are done with 'mutable <header> {}'
		//  *  - switch cases don't require a 'break'
		//  * / Program:
		//	{Program} declarations+=Declaration*;
		@Override public ParserRule getRule() { return rule; }

		//{Program} declarations+=Declaration*
		public Group getGroup() { return cGroup; }

		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }

		//declarations+=Declaration*
		public Assignment getDeclarationsAssignment_1() { return cDeclarationsAssignment_1; }

		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_1_0() { return cDeclarationsDeclarationParserRuleCall_1_0; }
	}

	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Declaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGlobalVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIncludeDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPseudoIncludeDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRuleDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Declaration:
		//	GlobalVarDeclaration
		//	| FunctionDeclaration
		//	| IncludeDeclaration
		//	| PseudoIncludeDeclaration
		//	| RuleDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//GlobalVarDeclaration | FunctionDeclaration | IncludeDeclaration | PseudoIncludeDeclaration | RuleDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//GlobalVarDeclaration
		public RuleCall getGlobalVarDeclarationParserRuleCall_0() { return cGlobalVarDeclarationParserRuleCall_0; }

		//FunctionDeclaration
		public RuleCall getFunctionDeclarationParserRuleCall_1() { return cFunctionDeclarationParserRuleCall_1; }

		//IncludeDeclaration
		public RuleCall getIncludeDeclarationParserRuleCall_2() { return cIncludeDeclarationParserRuleCall_2; }

		//PseudoIncludeDeclaration
		public RuleCall getPseudoIncludeDeclarationParserRuleCall_3() { return cPseudoIncludeDeclarationParserRuleCall_3; }

		//RuleDeclaration
		public RuleCall getRuleDeclarationParserRuleCall_4() { return cRuleDeclarationParserRuleCall_4; }
	}

	public class IncludeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.IncludeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncludeDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIncludeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilePathAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilePathAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IncludeDeclaration:
		//	{IncludeDeclaration} 'include' filePath=STRING ';' // paths are relative to main directory (e.g. ai2 or trigger2), not to current directory
		//;
		@Override public ParserRule getRule() { return rule; }

		//{IncludeDeclaration} 'include' filePath=STRING ';'
		public Group getGroup() { return cGroup; }

		//{IncludeDeclaration}
		public Action getIncludeDeclarationAction_0() { return cIncludeDeclarationAction_0; }

		//'include'
		public Keyword getIncludeKeyword_1() { return cIncludeKeyword_1; }

		//filePath=STRING
		public Assignment getFilePathAssignment_2() { return cFilePathAssignment_2; }

		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_2_0() { return cFilePathSTRINGTerminalRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PseudoIncludeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.PseudoIncludeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIncludeDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPSEUDO_PRECOMPILERTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cIncludeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilePathAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilePathSTRINGTerminalRuleCall_3_0 = (RuleCall)cFilePathAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// can be used to make this program think an include declaration is present,
		//// which is useful for stuff that is actually present at runtime e.g. because two files are included in a third one.
		//PseudoIncludeDeclaration IncludeDeclaration:
		//	{IncludeDeclaration} PSEUDO_PRECOMPILER 'include' filePath=STRING ';'
		@Override public ParserRule getRule() { return rule; }

		//{IncludeDeclaration} PSEUDO_PRECOMPILER 'include' filePath=STRING ';'
		public Group getGroup() { return cGroup; }

		//{IncludeDeclaration}
		public Action getIncludeDeclarationAction_0() { return cIncludeDeclarationAction_0; }

		//PSEUDO_PRECOMPILER
		public RuleCall getPSEUDO_PRECOMPILERTerminalRuleCall_1() { return cPSEUDO_PRECOMPILERTerminalRuleCall_1; }

		//'include'
		public Keyword getIncludeKeyword_2() { return cIncludeKeyword_2; }

		//filePath=STRING
		public Assignment getFilePathAssignment_3() { return cFilePathAssignment_3; }

		//STRING
		public RuleCall getFilePathSTRINGTerminalRuleCall_3_0() { return cFilePathSTRINGTerminalRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class VarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VarDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGlobalVarDeclarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cForVarDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// supertype only
		//VarDeclaration:
		//	LocalVarDeclaration
		//	| GlobalVarDeclaration
		//	| ParameterDeclaration
		//	| ForVarDeclaration;
		@Override public ParserRule getRule() { return rule; }

		//LocalVarDeclaration | GlobalVarDeclaration | ParameterDeclaration | ForVarDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalVarDeclaration
		public RuleCall getLocalVarDeclarationParserRuleCall_0() { return cLocalVarDeclarationParserRuleCall_0; }

		//GlobalVarDeclaration
		public RuleCall getGlobalVarDeclarationParserRuleCall_1() { return cGlobalVarDeclarationParserRuleCall_1; }

		//ParameterDeclaration
		public RuleCall getParameterDeclarationParserRuleCall_2() { return cParameterDeclarationParserRuleCall_2; }

		//ForVarDeclaration
		public RuleCall getForVarDeclarationParserRuleCall_3() { return cForVarDeclarationParserRuleCall_3; }
	}

	public class LocalVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.LocalVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVarTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueExpressionParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LocalVarDeclaration:
		//	{LocalVarDeclaration} type=VarTypeSpecifier name=ID '=' value=Expression ';';
		@Override public ParserRule getRule() { return rule; }

		//{LocalVarDeclaration} type=VarTypeSpecifier name=ID '=' value=Expression ';'
		public Group getGroup() { return cGroup; }

		//{LocalVarDeclaration}
		public Action getLocalVarDeclarationAction_0() { return cLocalVarDeclarationAction_0; }

		//type=VarTypeSpecifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VarTypeSpecifier
		public RuleCall getTypeVarTypeSpecifierParserRuleCall_1_0() { return cTypeVarTypeSpecifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=Expression
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_4_0() { return cValueExpressionParserRuleCall_4_0; }

		//';'
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class GlobalVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.GlobalVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cConstAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cConstConstKeyword_1_0_0 = (Keyword)cConstAssignment_1_0.eContents().get(0);
		private final Assignment cExternAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cExternExternKeyword_1_1_0 = (Keyword)cExternAssignment_1_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeVarTypeSpecifierParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueLiteralOrVarParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GlobalVarDeclaration:
		//	{GlobalVarDeclaration} (const?='const'? & extern?='extern'?) type=VarTypeSpecifier name=ID '=' value=LiteralOrVar
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//{GlobalVarDeclaration} (const?='const'? & extern?='extern'?) type=VarTypeSpecifier name=ID '=' value=LiteralOrVar ';'
		public Group getGroup() { return cGroup; }

		//{GlobalVarDeclaration}
		public Action getGlobalVarDeclarationAction_0() { return cGlobalVarDeclarationAction_0; }

		//(const?='const'? & extern?='extern'?)
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//const?='const'?
		public Assignment getConstAssignment_1_0() { return cConstAssignment_1_0; }

		//'const'
		public Keyword getConstConstKeyword_1_0_0() { return cConstConstKeyword_1_0_0; }

		//extern?='extern'?
		public Assignment getExternAssignment_1_1() { return cExternAssignment_1_1; }

		//'extern'
		public Keyword getExternExternKeyword_1_1_0() { return cExternExternKeyword_1_1_0; }

		//type=VarTypeSpecifier
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//VarTypeSpecifier
		public RuleCall getTypeVarTypeSpecifierParserRuleCall_2_0() { return cTypeVarTypeSpecifierParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//'='
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//value=LiteralOrVar
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }

		//LiteralOrVar
		public RuleCall getValueLiteralOrVarParserRuleCall_5_0() { return cValueLiteralOrVarParserRuleCall_5_0; }

		//';'
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeVarTypeSpecifierParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueLiteralOrVarParserRuleCall_4_0 = (RuleCall)cValueAssignment_4.eContents().get(0);
		
		//ParameterDeclaration:
		//	{ParameterDeclaration} type=VarTypeSpecifier name=ID '=' value=LiteralOrVar;
		@Override public ParserRule getRule() { return rule; }

		//{ParameterDeclaration} type=VarTypeSpecifier name=ID '=' value=LiteralOrVar
		public Group getGroup() { return cGroup; }

		//{ParameterDeclaration}
		public Action getParameterDeclarationAction_0() { return cParameterDeclarationAction_0; }

		//type=VarTypeSpecifier
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//VarTypeSpecifier
		public RuleCall getTypeVarTypeSpecifierParserRuleCall_1_0() { return cTypeVarTypeSpecifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//value=LiteralOrVar
		public Assignment getValueAssignment_4() { return cValueAssignment_4; }

		//LiteralOrVar
		public RuleCall getValueLiteralOrVarParserRuleCall_4_0() { return cValueLiteralOrVarParserRuleCall_4_0; }
	}

	public class ForVarDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ForVarDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForVarDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//ForVarDeclaration:
		//	{ForVarDeclaration} name=ID '=' value=Expression //type='int'
		//;
		@Override public ParserRule getRule() { return rule; }

		//{ForVarDeclaration} name=ID '=' value=Expression
		public Group getGroup() { return cGroup; }

		//{ForVarDeclaration}
		public Action getForVarDeclarationAction_0() { return cForVarDeclarationAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Expression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_3_0() { return cValueExpressionParserRuleCall_3_0; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cMutableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cMutableMutableKeyword_1_0 = (Keyword)cMutableAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeFunctionTypeSpecifierParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Keyword cVoidKeyword_5_0 = (Keyword)cAlternatives_5.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Assignment cParametersAssignment_5_1_0 = (Assignment)cGroup_5_1.eContents().get(0);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_5_1_0_0 = (RuleCall)cParametersAssignment_5_1_0.eContents().get(0);
		private final Group cGroup_5_1_1 = (Group)cGroup_5_1.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_1_0 = (Keyword)cGroup_5_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_5_1_1_1 = (Assignment)cGroup_5_1_1.eContents().get(1);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_5_1_1_1_0 = (RuleCall)cParametersAssignment_5_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBodyAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBodyBlockParserRuleCall_7_0 = (RuleCall)cBodyAssignment_7.eContents().get(0);
		
		//FunctionDeclaration:
		//	{FunctionDeclaration} mutable?='mutable'? type=FunctionTypeSpecifier name=ID
		//	'(' ('void'? | parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*) ')'
		//	body=Block;
		@Override public ParserRule getRule() { return rule; }

		//{FunctionDeclaration} mutable?='mutable'? type=FunctionTypeSpecifier name=ID '(' ('void'? |
		//parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*) ')' body=Block
		public Group getGroup() { return cGroup; }

		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_0() { return cFunctionDeclarationAction_0; }

		//mutable?='mutable'?
		public Assignment getMutableAssignment_1() { return cMutableAssignment_1; }

		//'mutable'
		public Keyword getMutableMutableKeyword_1_0() { return cMutableMutableKeyword_1_0; }

		//type=FunctionTypeSpecifier
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//FunctionTypeSpecifier
		public RuleCall getTypeFunctionTypeSpecifierParserRuleCall_2_0() { return cTypeFunctionTypeSpecifierParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//('void'? | parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*)
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//'void'?
		public Keyword getVoidKeyword_5_0() { return cVoidKeyword_5_0; }

		//parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_5_1_0() { return cParametersAssignment_5_1_0; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_5_1_0_0() { return cParametersParameterDeclarationParserRuleCall_5_1_0_0; }

		//(',' parameters+=ParameterDeclaration)*
		public Group getGroup_5_1_1() { return cGroup_5_1_1; }

		//','
		public Keyword getCommaKeyword_5_1_1_0() { return cCommaKeyword_5_1_1_0; }

		//parameters+=ParameterDeclaration
		public Assignment getParametersAssignment_5_1_1_1() { return cParametersAssignment_5_1_1_1; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_5_1_1_1_0() { return cParametersParameterDeclarationParserRuleCall_5_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//body=Block
		public Assignment getBodyAssignment_7() { return cBodyAssignment_7; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_7_0() { return cBodyBlockParserRuleCall_7_0; }
	}

	public class FunctionTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.FunctionTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVoidTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarTypeSpecifierParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FunctionTypeSpecifier Type:
		//	VoidType
		//	| VarTypeSpecifier
		@Override public ParserRule getRule() { return rule; }

		//VoidType | VarTypeSpecifier
		public Alternatives getAlternatives() { return cAlternatives; }

		//VoidType
		public RuleCall getVoidTypeParserRuleCall_0() { return cVoidTypeParserRuleCall_0; }

		//VarTypeSpecifier
		public RuleCall getVarTypeSpecifierParserRuleCall_1() { return cVarTypeSpecifierParserRuleCall_1; }
	}

	public class RuleDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.RuleDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRuleDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cUnorderedGroup_3.eContents().get(0);
		private final Assignment cActiveAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final Keyword cActiveActiveKeyword_3_0_0_0 = (Keyword)cActiveAssignment_3_0_0.eContents().get(0);
		private final Keyword cInactiveKeyword_3_0_1 = (Keyword)cAlternatives_3_0.eContents().get(1);
		private final Assignment cRunImmediatelyAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cRunImmediatelyRunImmediatelyKeyword_3_1_0 = (Keyword)cRunImmediatelyAssignment_3_1.eContents().get(0);
		private final Assignment cHighFrequencyAssignment_3_2 = (Assignment)cUnorderedGroup_3.eContents().get(2);
		private final Keyword cHighFrequencyHighFrequencyKeyword_3_2_0 = (Keyword)cHighFrequencyAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cUnorderedGroup_3.eContents().get(3);
		private final Keyword cGroupKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cGroupAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cGroupIDTerminalRuleCall_3_3_1_0 = (RuleCall)cGroupAssignment_3_3_1.eContents().get(0);
		private final Group cGroup_3_4 = (Group)cUnorderedGroup_3.eContents().get(4);
		private final Keyword cMinIntervalKeyword_3_4_0 = (Keyword)cGroup_3_4.eContents().get(0);
		private final Assignment cMinIntervalAssignment_3_4_1 = (Assignment)cGroup_3_4.eContents().get(1);
		private final RuleCall cMinIntervalINTTerminalRuleCall_3_4_1_0 = (RuleCall)cMinIntervalAssignment_3_4_1.eContents().get(0);
		private final Group cGroup_3_5 = (Group)cUnorderedGroup_3.eContents().get(5);
		private final Keyword cMaxIntervalKeyword_3_5_0 = (Keyword)cGroup_3_5.eContents().get(0);
		private final Assignment cMaxIntervalAssignment_3_5_1 = (Assignment)cGroup_3_5.eContents().get(1);
		private final RuleCall cMaxIntervalINTTerminalRuleCall_3_5_1_0 = (RuleCall)cMaxIntervalAssignment_3_5_1.eContents().get(0);
		private final Group cGroup_3_6 = (Group)cUnorderedGroup_3.eContents().get(6);
		private final Keyword cPriorityKeyword_3_6_0 = (Keyword)cGroup_3_6.eContents().get(0);
		private final Assignment cPriorityAssignment_3_6_1 = (Assignment)cGroup_3_6.eContents().get(1);
		private final RuleCall cPriorityINTTerminalRuleCall_3_6_1_0 = (RuleCall)cPriorityAssignment_3_6_1.eContents().get(0);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyBlockParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//RuleDeclaration:
		//	{RuleDeclaration} 'rule' name=ID ((active?='active' | 'inactive') & runImmediately?='runImmediately'?
		//	& highFrequency?='highFrequency'?
		//	& ('group' group=ID)?
		//	& ('minInterval' minInterval=INT)?
		//	& ('maxInterval' maxInterval=INT)?
		//	& ('priority' priority=INT)?) body=Block;
		@Override public ParserRule getRule() { return rule; }

		//{RuleDeclaration} 'rule' name=ID ((active?='active' | 'inactive') & runImmediately?='runImmediately'? &
		//highFrequency?='highFrequency'? & ('group' group=ID)? & ('minInterval' minInterval=INT)? & ('maxInterval'
		//maxInterval=INT)? & ('priority' priority=INT)?) body=Block
		public Group getGroup() { return cGroup; }

		//{RuleDeclaration}
		public Action getRuleDeclarationAction_0() { return cRuleDeclarationAction_0; }

		//'rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//((active?='active' | 'inactive') & runImmediately?='runImmediately'? & highFrequency?='highFrequency'? & ('group'
		//group=ID)? & ('minInterval' minInterval=INT)? & ('maxInterval' maxInterval=INT)? & ('priority' priority=INT)?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }

		//(active?='active' | 'inactive')
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//active?='active'
		public Assignment getActiveAssignment_3_0_0() { return cActiveAssignment_3_0_0; }

		//'active'
		public Keyword getActiveActiveKeyword_3_0_0_0() { return cActiveActiveKeyword_3_0_0_0; }

		//'inactive'
		public Keyword getInactiveKeyword_3_0_1() { return cInactiveKeyword_3_0_1; }

		//runImmediately?='runImmediately'?
		public Assignment getRunImmediatelyAssignment_3_1() { return cRunImmediatelyAssignment_3_1; }

		//'runImmediately'
		public Keyword getRunImmediatelyRunImmediatelyKeyword_3_1_0() { return cRunImmediatelyRunImmediatelyKeyword_3_1_0; }

		//highFrequency?='highFrequency'?
		public Assignment getHighFrequencyAssignment_3_2() { return cHighFrequencyAssignment_3_2; }

		//'highFrequency'
		public Keyword getHighFrequencyHighFrequencyKeyword_3_2_0() { return cHighFrequencyHighFrequencyKeyword_3_2_0; }

		//('group' group=ID)?
		public Group getGroup_3_3() { return cGroup_3_3; }

		//'group'
		public Keyword getGroupKeyword_3_3_0() { return cGroupKeyword_3_3_0; }

		//group=ID
		public Assignment getGroupAssignment_3_3_1() { return cGroupAssignment_3_3_1; }

		//ID
		public RuleCall getGroupIDTerminalRuleCall_3_3_1_0() { return cGroupIDTerminalRuleCall_3_3_1_0; }

		//('minInterval' minInterval=INT)?
		public Group getGroup_3_4() { return cGroup_3_4; }

		//'minInterval'
		public Keyword getMinIntervalKeyword_3_4_0() { return cMinIntervalKeyword_3_4_0; }

		//minInterval=INT
		public Assignment getMinIntervalAssignment_3_4_1() { return cMinIntervalAssignment_3_4_1; }

		//INT
		public RuleCall getMinIntervalINTTerminalRuleCall_3_4_1_0() { return cMinIntervalINTTerminalRuleCall_3_4_1_0; }

		//('maxInterval' maxInterval=INT)?
		public Group getGroup_3_5() { return cGroup_3_5; }

		//'maxInterval'
		public Keyword getMaxIntervalKeyword_3_5_0() { return cMaxIntervalKeyword_3_5_0; }

		//maxInterval=INT
		public Assignment getMaxIntervalAssignment_3_5_1() { return cMaxIntervalAssignment_3_5_1; }

		//INT
		public RuleCall getMaxIntervalINTTerminalRuleCall_3_5_1_0() { return cMaxIntervalINTTerminalRuleCall_3_5_1_0; }

		//('priority' priority=INT)?
		public Group getGroup_3_6() { return cGroup_3_6; }

		//'priority'
		public Keyword getPriorityKeyword_3_6_0() { return cPriorityKeyword_3_6_0; }

		//priority=INT
		public Assignment getPriorityAssignment_3_6_1() { return cPriorityAssignment_3_6_1; }

		//INT
		public RuleCall getPriorityINTTerminalRuleCall_3_6_1_0() { return cPriorityINTTerminalRuleCall_3_6_1_0; }

		//body=Block
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Block
		public RuleCall getBodyBlockParserRuleCall_4_0() { return cBodyBlockParserRuleCall_4_0; }
	}

	public class VarTypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VarTypeSpecifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFloatTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBoolTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVectorTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//VarTypeSpecifier Type:
		//	IntType
		//	| FloatType
		//	| BoolType
		//	| VectorType
		//	| StringType
		@Override public ParserRule getRule() { return rule; }

		//IntType | FloatType | BoolType | VectorType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_1() { return cFloatTypeParserRuleCall_1; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_2() { return cBoolTypeParserRuleCall_2; }

		//VectorType
		public RuleCall getVectorTypeParserRuleCall_3() { return cVectorTypeParserRuleCall_3; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_4() { return cStringTypeParserRuleCall_4; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cContentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContentsVarDeclarationOrStatementParserRuleCall_2_0 = (RuleCall)cContentsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} '{' contents+=VarDeclarationOrStatement* '}';
		@Override public ParserRule getRule() { return rule; }

		//{Block} '{' contents+=VarDeclarationOrStatement* '}'
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//contents+=VarDeclarationOrStatement*
		public Assignment getContentsAssignment_2() { return cContentsAssignment_2; }

		//VarDeclarationOrStatement
		public RuleCall getContentsVarDeclarationOrStatementParserRuleCall_2_0() { return cContentsVarDeclarationOrStatementParserRuleCall_2_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VarDeclarationOrStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VarDeclarationOrStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLocalVarDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VarDeclarationOrStatement Statement:
		//	LocalVarDeclaration
		//	| Statement
		@Override public ParserRule getRule() { return rule; }

		//LocalVarDeclaration | Statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//LocalVarDeclaration
		public RuleCall getLocalVarDeclarationParserRuleCall_0() { return cLocalVarDeclarationParserRuleCall_0; }

		//Statement
		public RuleCall getStatementParserRuleCall_1() { return cStatementParserRuleCall_1; }
	}

	public class StatementOrBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.StatementOrBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StatementOrBlock Statement:
		//	Statement
		//	| Block
		@Override public ParserRule getRule() { return rule; }

		//Statement | Block
		public Alternatives getAlternatives() { return cAlternatives; }

		//Statement
		public RuleCall getStatementParserRuleCall_0() { return cStatementParserRuleCall_0; }

		//Block
		public RuleCall getBlockParserRuleCall_1() { return cBlockParserRuleCall_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpressionStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPostfixStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIfElseStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cSwitchStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReturnStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cContinueStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBreakStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		
		//Statement:
		//	ExpressionStatement
		//	| PostfixStatement
		//	| IfElseStatement
		//	| WhileStatement
		//	| ForStatement
		//	| SwitchStatement
		//	| ReturnStatement
		//	| ContinueStatement //TODO add some restrictions (inside loop)
		//	| BreakStatement;
		@Override public ParserRule getRule() { return rule; }

		//ExpressionStatement | PostfixStatement | IfElseStatement | WhileStatement | ForStatement | SwitchStatement |
		//ReturnStatement | ContinueStatement //TODO add some restrictions (inside loop)
		//| BreakStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//ExpressionStatement
		public RuleCall getExpressionStatementParserRuleCall_0() { return cExpressionStatementParserRuleCall_0; }

		//PostfixStatement
		public RuleCall getPostfixStatementParserRuleCall_1() { return cPostfixStatementParserRuleCall_1; }

		//IfElseStatement
		public RuleCall getIfElseStatementParserRuleCall_2() { return cIfElseStatementParserRuleCall_2; }

		//WhileStatement
		public RuleCall getWhileStatementParserRuleCall_3() { return cWhileStatementParserRuleCall_3; }

		//ForStatement
		public RuleCall getForStatementParserRuleCall_4() { return cForStatementParserRuleCall_4; }

		//SwitchStatement
		public RuleCall getSwitchStatementParserRuleCall_5() { return cSwitchStatementParserRuleCall_5; }

		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_6() { return cReturnStatementParserRuleCall_6; }

		//ContinueStatement
		public RuleCall getContinueStatementParserRuleCall_7() { return cContinueStatementParserRuleCall_7; }

		//BreakStatement
		public RuleCall getBreakStatementParserRuleCall_8() { return cBreakStatementParserRuleCall_8; }
	}

	public class ExpressionStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ExpressionStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cCallParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cAssignParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//ExpressionStatement Statement:
		//	Call ';'
		//	| Assign ';'
		@Override public ParserRule getRule() { return rule; }

		//Call ';' | Assign ';'
		public Alternatives getAlternatives() { return cAlternatives; }

		//Call ';'
		public Group getGroup_0() { return cGroup_0; }

		//Call
		public RuleCall getCallParserRuleCall_0_0() { return cCallParserRuleCall_0_0; }

		//';'
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//Assign ';'
		public Group getGroup_1() { return cGroup_1; }

		//Assign
		public RuleCall getAssignParserRuleCall_1_0() { return cAssignParserRuleCall_1_0; }

		//';'
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}

	public class PostfixStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.PostfixStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPostfixStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cVarVarDeclarationCrossReference_1_0 = (CrossReference)cVarAssignment_1.eContents().get(0);
		private final RuleCall cVarVarDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cVarVarDeclarationCrossReference_1_0.eContents().get(1);
		private final Assignment cOpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOpPostFixOpParserRuleCall_2_0 = (RuleCall)cOpAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PostfixStatement Statement:
		//	{PostfixStatement} var=[VarDeclaration] op=PostFixOp ';'
		@Override public ParserRule getRule() { return rule; }

		//{PostfixStatement} var=[VarDeclaration] op=PostFixOp ';'
		public Group getGroup() { return cGroup; }

		//{PostfixStatement}
		public Action getPostfixStatementAction_0() { return cPostfixStatementAction_0; }

		//var=[VarDeclaration]
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//[VarDeclaration]
		public CrossReference getVarVarDeclarationCrossReference_1_0() { return cVarVarDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getVarVarDeclarationIDTerminalRuleCall_1_0_1() { return cVarVarDeclarationIDTerminalRuleCall_1_0_1; }

		//op=PostFixOp
		public Assignment getOpAssignment_2() { return cOpAssignment_2; }

		//PostFixOp
		public RuleCall getOpPostFixOpParserRuleCall_2_0() { return cOpPostFixOpParserRuleCall_2_0; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class IfElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.IfElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfElseStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cThenStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cThenStatementStatementOrBlockParserRuleCall_5_0 = (RuleCall)cThenStatementAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cElseKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cElseStatementAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cElseStatementStatementOrBlockParserRuleCall_6_1_0 = (RuleCall)cElseStatementAssignment_6_1.eContents().get(0);
		
		//IfElseStatement Statement:
		//	{IfElseStatement} 'if' '(' condition=Expression ')' thenStatement=StatementOrBlock (=> 'else'
		//	elseStatement=StatementOrBlock)?
		@Override public ParserRule getRule() { return rule; }

		//{IfElseStatement} 'if' '(' condition=Expression ')' thenStatement=StatementOrBlock (=> 'else'
		//elseStatement=StatementOrBlock)?
		public Group getGroup() { return cGroup; }

		//{IfElseStatement}
		public Action getIfElseStatementAction_0() { return cIfElseStatementAction_0; }

		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//thenStatement=StatementOrBlock
		public Assignment getThenStatementAssignment_5() { return cThenStatementAssignment_5; }

		//StatementOrBlock
		public RuleCall getThenStatementStatementOrBlockParserRuleCall_5_0() { return cThenStatementStatementOrBlockParserRuleCall_5_0; }

		//(=> 'else' elseStatement=StatementOrBlock)?
		public Group getGroup_6() { return cGroup_6; }

		//=> 'else'
		public Keyword getElseKeyword_6_0() { return cElseKeyword_6_0; }

		//elseStatement=StatementOrBlock
		public Assignment getElseStatementAssignment_6_1() { return cElseStatementAssignment_6_1; }

		//StatementOrBlock
		public RuleCall getElseStatementStatementOrBlockParserRuleCall_6_1_0() { return cElseStatementStatementOrBlockParserRuleCall_6_1_0; }
	}

	public class WhileStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.WhileStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatementAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementStatementOrBlockParserRuleCall_5_0 = (RuleCall)cStatementAssignment_5.eContents().get(0);
		
		//WhileStatement Statement:
		//	{WhileStatement} 'while' '(' condition=Expression ')' statement=StatementOrBlock
		@Override public ParserRule getRule() { return rule; }

		//{WhileStatement} 'while' '(' condition=Expression ')' statement=StatementOrBlock
		public Group getGroup() { return cGroup; }

		//{WhileStatement}
		public Action getWhileStatementAction_0() { return cWhileStatementAction_0; }

		//'while'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//condition=Expression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }

		//Expression
		public RuleCall getConditionExpressionParserRuleCall_3_0() { return cConditionExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//statement=StatementOrBlock
		public Assignment getStatementAssignment_5() { return cStatementAssignment_5; }

		//StatementOrBlock
		public RuleCall getStatementStatementOrBlockParserRuleCall_5_0() { return cStatementStatementOrBlockParserRuleCall_5_0; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cVarForVarDeclarationParserRuleCall_3_0 = (RuleCall)cVarAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cOpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOpRelOpParserRuleCall_5_0 = (RuleCall)cOpAssignment_5.eContents().get(0);
		private final Assignment cEndAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cEndExpressionParserRuleCall_6_0 = (RuleCall)cEndAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementStatementOrBlockParserRuleCall_8_0 = (RuleCall)cStatementAssignment_8.eContents().get(0);
		
		//ForStatement Statement:
		//	{ForStatement} 'for' '(' var=ForVarDeclaration ';' op=RelOp end=Expression ')' statement=StatementOrBlock
		@Override public ParserRule getRule() { return rule; }

		//{ForStatement} 'for' '(' var=ForVarDeclaration ';' op=RelOp end=Expression ')' statement=StatementOrBlock
		public Group getGroup() { return cGroup; }

		//{ForStatement}
		public Action getForStatementAction_0() { return cForStatementAction_0; }

		//'for'
		public Keyword getForKeyword_1() { return cForKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//var=ForVarDeclaration
		public Assignment getVarAssignment_3() { return cVarAssignment_3; }

		//ForVarDeclaration
		public RuleCall getVarForVarDeclarationParserRuleCall_3_0() { return cVarForVarDeclarationParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//op=RelOp
		public Assignment getOpAssignment_5() { return cOpAssignment_5; }

		//RelOp
		public RuleCall getOpRelOpParserRuleCall_5_0() { return cOpRelOpParserRuleCall_5_0; }

		//end=Expression
		public Assignment getEndAssignment_6() { return cEndAssignment_6; }

		//Expression
		public RuleCall getEndExpressionParserRuleCall_6_0() { return cEndExpressionParserRuleCall_6_0; }

		//')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//statement=StatementOrBlock
		public Assignment getStatementAssignment_8() { return cStatementAssignment_8; }

		//StatementOrBlock
		public RuleCall getStatementStatementOrBlockParserRuleCall_8_0() { return cStatementStatementOrBlockParserRuleCall_8_0; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSwitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cCasesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cCasesSwitchCaseParserRuleCall_6_0 = (RuleCall)cCasesAssignment_6.eContents().get(0);
		private final Assignment cDefaultAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cDefaultSwitchDefaultParserRuleCall_7_0 = (RuleCall)cDefaultAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//SwitchStatement Statement:
		//	{SwitchStatement} 'switch' '(' expression=Expression ')' '{' cases+=SwitchCase* default=SwitchDefault? '}'
		@Override public ParserRule getRule() { return rule; }

		//{SwitchStatement} 'switch' '(' expression=Expression ')' '{' cases+=SwitchCase* default=SwitchDefault? '}'
		public Group getGroup() { return cGroup; }

		//{SwitchStatement}
		public Action getSwitchStatementAction_0() { return cSwitchStatementAction_0; }

		//'switch'
		public Keyword getSwitchKeyword_1() { return cSwitchKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//cases+=SwitchCase*
		public Assignment getCasesAssignment_6() { return cCasesAssignment_6; }

		//SwitchCase
		public RuleCall getCasesSwitchCaseParserRuleCall_6_0() { return cCasesSwitchCaseParserRuleCall_6_0; }

		//default=SwitchDefault?
		public Assignment getDefaultAssignment_7() { return cDefaultAssignment_7; }

		//SwitchDefault
		public RuleCall getDefaultSwitchDefaultParserRuleCall_7_0() { return cDefaultSwitchDefaultParserRuleCall_7_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueLiteralNumOrVarParserRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValueAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValueLiteralNumOrVarParserRuleCall_2_1_1_0 = (RuleCall)cValueAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementOrBlockParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//SwitchCase:
		//	{SwitchCase} 'case' (value=LiteralNumOrVar | '(' value=LiteralNumOrVar ')') ':' statement=StatementOrBlock;
		@Override public ParserRule getRule() { return rule; }

		//{SwitchCase} 'case' (value=LiteralNumOrVar | '(' value=LiteralNumOrVar ')') ':' statement=StatementOrBlock
		public Group getGroup() { return cGroup; }

		//{SwitchCase}
		public Action getSwitchCaseAction_0() { return cSwitchCaseAction_0; }

		//'case'
		public Keyword getCaseKeyword_1() { return cCaseKeyword_1; }

		//(value=LiteralNumOrVar | '(' value=LiteralNumOrVar ')')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=LiteralNumOrVar
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//LiteralNumOrVar
		public RuleCall getValueLiteralNumOrVarParserRuleCall_2_0_0() { return cValueLiteralNumOrVarParserRuleCall_2_0_0; }

		//'(' value=LiteralNumOrVar ')'
		public Group getGroup_2_1() { return cGroup_2_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }

		//value=LiteralNumOrVar
		public Assignment getValueAssignment_2_1_1() { return cValueAssignment_2_1_1; }

		//LiteralNumOrVar
		public RuleCall getValueLiteralNumOrVarParserRuleCall_2_1_1_0() { return cValueLiteralNumOrVarParserRuleCall_2_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }

		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//statement=StatementOrBlock
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//StatementOrBlock
		public RuleCall getStatementStatementOrBlockParserRuleCall_4_0() { return cStatementStatementOrBlockParserRuleCall_4_0; }
	}

	public class SwitchDefaultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SwitchDefault");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchDefaultAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefaultKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementStatementOrBlockParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		
		//SwitchDefault:
		//	{SwitchDefault} 'default' ':' statement=StatementOrBlock;
		@Override public ParserRule getRule() { return rule; }

		//{SwitchDefault} 'default' ':' statement=StatementOrBlock
		public Group getGroup() { return cGroup; }

		//{SwitchDefault}
		public Action getSwitchDefaultAction_0() { return cSwitchDefaultAction_0; }

		//'default'
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//statement=StatementOrBlock
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }

		//StatementOrBlock
		public RuleCall getStatementStatementOrBlockParserRuleCall_3_0() { return cStatementStatementOrBlockParserRuleCall_3_0; }
	}

	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReturnStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReturnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ReturnStatement Statement:
		//	{ReturnStatement} 'return' ('(' expression=Expression ')')? ';'
		@Override public ParserRule getRule() { return rule; }

		//{ReturnStatement} 'return' ('(' expression=Expression ')')? ';'
		public Group getGroup() { return cGroup; }

		//{ReturnStatement}
		public Action getReturnStatementAction_0() { return cReturnStatementAction_0; }

		//'return'
		public Keyword getReturnKeyword_1() { return cReturnKeyword_1; }

		//('(' expression=Expression ')')?
		public Group getGroup_2() { return cGroup_2; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_1_0() { return cExpressionExpressionParserRuleCall_2_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class ContinueStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ContinueStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cContinueStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStatement Statement:
		//	{ContinueStatement} 'continue' ';'
		@Override public ParserRule getRule() { return rule; }

		//{ContinueStatement} 'continue' ';'
		public Group getGroup() { return cGroup; }

		//{ContinueStatement}
		public Action getContinueStatementAction_0() { return cContinueStatementAction_0; }

		//'continue'
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class BreakStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.BreakStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBreakStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBreakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStatement Statement:
		//	{BreakStatement} 'break' ';'
		@Override public ParserRule getRule() { return rule; }

		//{BreakStatement} 'break' ';'
		public Group getGroup() { return cGroup; }

		//{BreakStatement}
		public Action getBreakStatementAction_0() { return cBreakStatementAction_0; }

		//'break'
		public Keyword getBreakKeyword_1() { return cBreakKeyword_1; }

		//';'
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class PostFixOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.PostFixOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//PostFixOp:
		//	'++'
		//	| '--';
		@Override public ParserRule getRule() { return rule; }

		//'++' | '--'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'++'
		public Keyword getPlusSignPlusSignKeyword_0() { return cPlusSignPlusSignKeyword_0; }

		//'--'
		public Keyword getHyphenMinusHyphenMinusKeyword_1() { return cHyphenMinusHyphenMinusKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression:
		//	Assign
		//	| SimpleExpression;
		@Override public ParserRule getRule() { return rule; }

		//Assign | SimpleExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//Assign
		public RuleCall getAssignParserRuleCall_0() { return cAssignParserRuleCall_0; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_1() { return cSimpleExpressionParserRuleCall_1; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cVarVarParserRuleCall_1_0_0 = (RuleCall)cVarAssignment_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		
		//Assign Expression:
		//	{Assign} (var=Var '=' expression=Expression)
		@Override public ParserRule getRule() { return rule; }

		//{Assign} (var=Var '=' expression=Expression)
		public Group getGroup() { return cGroup; }

		//{Assign}
		public Action getAssignAction_0() { return cAssignAction_0; }

		//(var=Var '=' expression=Expression)
		public Group getGroup_1() { return cGroup_1; }

		//var=Var
		public Assignment getVarAssignment_1_0() { return cVarAssignment_1_0; }

		//Var
		public RuleCall getVarVarParserRuleCall_1_0_0() { return cVarVarParserRuleCall_1_0_0; }

		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_2_0() { return cExpressionExpressionParserRuleCall_1_2_0; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//SimpleExpression Expression:
		//	AndExpression ({OrExpression.left=current} op='||' right=AndExpression)*
		@Override public ParserRule getRule() { return rule; }

		//AndExpression ({OrExpression.left=current} op='||' right=AndExpression)*
		public Group getGroup() { return cGroup; }

		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }

		//({OrExpression.left=current} op='||' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }

		//op='||'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0() { return cOpVerticalLineVerticalLineKeyword_1_1_0; }

		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0 = (Keyword)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualsExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression Expression:
		//	EqualsExpression ({AndExpression.left=current} op='&&' right=EqualsExpression)*
		@Override public ParserRule getRule() { return rule; }

		//EqualsExpression ({AndExpression.left=current} op='&&' right=EqualsExpression)*
		public Group getGroup() { return cGroup; }

		//EqualsExpression
		public RuleCall getEqualsExpressionParserRuleCall_0() { return cEqualsExpressionParserRuleCall_0; }

		//({AndExpression.left=current} op='&&' right=EqualsExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }

		//op='&&'
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0() { return cOpAmpersandAmpersandKeyword_1_1_0; }

		//right=EqualsExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//EqualsExpression
		public RuleCall getRightEqualsExpressionParserRuleCall_1_2_0() { return cRightEqualsExpressionParserRuleCall_1_2_0; }
	}

	public class EqualsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.EqualsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualsExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpEqOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//EqualsExpression Expression:
		//	ComparisonExpression ({EqualsExpression.left=current} op=EqOp right=ComparisonExpression)?
		@Override public ParserRule getRule() { return rule; }

		//ComparisonExpression ({EqualsExpression.left=current} op=EqOp right=ComparisonExpression)?
		public Group getGroup() { return cGroup; }

		//ComparisonExpression
		public RuleCall getComparisonExpressionParserRuleCall_0() { return cComparisonExpressionParserRuleCall_0; }

		//({EqualsExpression.left=current} op=EqOp right=ComparisonExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{EqualsExpression.left=current}
		public Action getEqualsExpressionLeftAction_1_0() { return cEqualsExpressionLeftAction_1_0; }

		//op=EqOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//EqOp
		public RuleCall getOpEqOpParserRuleCall_1_1_0() { return cOpEqOpParserRuleCall_1_1_0; }

		//right=ComparisonExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ComparisonExpression
		public RuleCall getRightComparisonExpressionParserRuleCall_1_2_0() { return cRightComparisonExpressionParserRuleCall_1_2_0; }
	}

	public class EqOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.EqOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EqOp:
		//	'=='
		//	| '!=';
		@Override public ParserRule getRule() { return rule; }

		//'==' | '!='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
	}

	public class ComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditiveExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpRelOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditiveExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//ComparisonExpression Expression:
		//	AdditiveExpression ({ComparisonExpression.left=current} op=RelOp right=AdditiveExpression)?
		@Override public ParserRule getRule() { return rule; }

		//AdditiveExpression ({ComparisonExpression.left=current} op=RelOp right=AdditiveExpression)?
		public Group getGroup() { return cGroup; }

		//AdditiveExpression
		public RuleCall getAdditiveExpressionParserRuleCall_0() { return cAdditiveExpressionParserRuleCall_0; }

		//({ComparisonExpression.left=current} op=RelOp right=AdditiveExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ComparisonExpression.left=current}
		public Action getComparisonExpressionLeftAction_1_0() { return cComparisonExpressionLeftAction_1_0; }

		//op=RelOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//RelOp
		public RuleCall getOpRelOpParserRuleCall_1_1_0() { return cOpRelOpParserRuleCall_1_1_0; }

		//right=AdditiveExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AdditiveExpression
		public RuleCall getRightAdditiveExpressionParserRuleCall_1_2_0() { return cRightAdditiveExpressionParserRuleCall_1_2_0; }
	}

	public class RelOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.RelOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//RelOp:
		//	'<='
		//	| '<'
		//	| '>'
		//	| '>=';
		@Override public ParserRule getRule() { return rule; }

		//'<=' | '<' | '>' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }

		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0() { return cLessThanSignEqualsSignKeyword_0; }

		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }

		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.AdditiveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicativeExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTermLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpAddOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicativeExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AdditiveExpression Expression:
		//	MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		@Override public ParserRule getRule() { return rule; }

		//MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		public Group getGroup() { return cGroup; }

		//MultiplicativeExpression
		public RuleCall getMultiplicativeExpressionParserRuleCall_0() { return cMultiplicativeExpressionParserRuleCall_0; }

		//({Term.left=current} op=AddOp right=MultiplicativeExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Term.left=current}
		public Action getTermLeftAction_1_0() { return cTermLeftAction_1_0; }

		//op=AddOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//AddOp
		public RuleCall getOpAddOpParserRuleCall_1_1_0() { return cOpAddOpParserRuleCall_1_1_0; }

		//right=MultiplicativeExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//MultiplicativeExpression
		public RuleCall getRightMultiplicativeExpressionParserRuleCall_1_2_0() { return cRightMultiplicativeExpressionParserRuleCall_1_2_0; }
	}

	public class AddOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.AddOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AddOp:
		//	'+'
		//	| '-';
		@Override public ParserRule getRule() { return rule; }

		//'+' | '-'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cFactorLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOpMulOpParserRuleCall_1_1_0 = (RuleCall)cOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MultiplicativeExpression Expression:
		//	Atom ({Factor.left=current} op=MulOp right=Atom)*
		@Override public ParserRule getRule() { return rule; }

		//Atom ({Factor.left=current} op=MulOp right=Atom)*
		public Group getGroup() { return cGroup; }

		//Atom
		public RuleCall getAtomParserRuleCall_0() { return cAtomParserRuleCall_0; }

		//({Factor.left=current} op=MulOp right=Atom)*
		public Group getGroup_1() { return cGroup_1; }

		//{Factor.left=current}
		public Action getFactorLeftAction_1_0() { return cFactorLeftAction_1_0; }

		//op=MulOp
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//MulOp
		public RuleCall getOpMulOpParserRuleCall_1_1_0() { return cOpMulOpParserRuleCall_1_1_0; }

		//right=Atom
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Atom
		public RuleCall getRightAtomParserRuleCall_1_2_0() { return cRightAtomParserRuleCall_1_2_0; }
	}

	public class MulOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.MulOp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MulOp:
		//	'*'
		//	| '/'
		//	| '%' //modulo has same order of operation as multiplication
		//;
		@Override public ParserRule getRule() { return rule; }

		//'*' | '/' | '%'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class AtomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Atom");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cCallParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVarParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Atom Expression:
		//	'(' Expression ')'
		//	| Call
		//	| Literal
		//	| Var
		@Override public ParserRule getRule() { return rule; }

		//'(' Expression ')' | Call | Literal | Var
		public Alternatives getAlternatives() { return cAlternatives; }

		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }

		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Call
		public RuleCall getCallParserRuleCall_1() { return cCallParserRuleCall_1; }

		//Literal
		public RuleCall getLiteralParserRuleCall_2() { return cLiteralParserRuleCall_2; }

		//Var
		public RuleCall getVarParserRuleCall_3() { return cVarParserRuleCall_3; }
	}

	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunctionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFunctionFunctionDeclarationCrossReference_1_0 = (CrossReference)cFunctionAssignment_1.eContents().get(0);
		private final RuleCall cFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cFunctionFunctionDeclarationCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cArgumentsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_0_0 = (RuleCall)cArgumentsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_3_1_1_0 = (RuleCall)cArgumentsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call Expression:
		//	{Call} function=[FunctionDeclaration] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		@Override public ParserRule getRule() { return rule; }

		//{Call} function=[FunctionDeclaration] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
		public Group getGroup() { return cGroup; }

		//{Call}
		public Action getCallAction_0() { return cCallAction_0; }

		//function=[FunctionDeclaration]
		public Assignment getFunctionAssignment_1() { return cFunctionAssignment_1; }

		//[FunctionDeclaration]
		public CrossReference getFunctionFunctionDeclarationCrossReference_1_0() { return cFunctionFunctionDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1() { return cFunctionFunctionDeclarationIDTerminalRuleCall_1_0_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(arguments+=Expression (',' arguments+=Expression)*)?
		public Group getGroup_3() { return cGroup_3; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_0() { return cArgumentsAssignment_3_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_0_0() { return cArgumentsExpressionParserRuleCall_3_0_0; }

		//(',' arguments+=Expression)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_3_1_1() { return cArgumentsAssignment_3_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_3_1_1_0() { return cArgumentsExpressionParserRuleCall_3_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationVarDeclarationCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationVarDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cDeclarationVarDeclarationCrossReference_1_0.eContents().get(1);
		
		//Var:
		//	{Var} declaration=[VarDeclaration];
		@Override public ParserRule getRule() { return rule; }

		//{Var} declaration=[VarDeclaration]
		public Group getGroup() { return cGroup; }

		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }

		//declaration=[VarDeclaration]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[VarDeclaration]
		public CrossReference getDeclarationVarDeclarationCrossReference_1_0() { return cDeclarationVarDeclarationCrossReference_1_0; }

		//ID
		public RuleCall getDeclarationVarDeclarationIDTerminalRuleCall_1_0_1() { return cDeclarationVarDeclarationIDTerminalRuleCall_1_0_1; }
	}

	public class LiteralOrVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.LiteralOrVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralOrVar Expression:
		//	Literal
		//	| Var
		@Override public ParserRule getRule() { return rule; }

		//Literal | Var
		public Alternatives getAlternatives() { return cAlternatives; }

		//Literal
		public RuleCall getLiteralParserRuleCall_0() { return cLiteralParserRuleCall_0; }

		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }
	}

	public class LiteralNumOrVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.LiteralNumOrVar");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//LiteralNumOrVar Expression:
		//	LiteralNum
		//	| Var
		@Override public ParserRule getRule() { return rule; }

		//LiteralNum | Var
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralNum
		public RuleCall getLiteralNumParserRuleCall_0() { return cLiteralNumParserRuleCall_0; }

		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLiteralNumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVectorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Literal:
		//	LiteralNum
		//	| Vector
		//	| {LiteralString} value=STRING // TODO concatenation != addition
		//;
		@Override public ParserRule getRule() { return rule; }

		//LiteralNum | Vector | {LiteralString} value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//LiteralNum
		public RuleCall getLiteralNumParserRuleCall_0() { return cLiteralNumParserRuleCall_0; }

		//Vector
		public RuleCall getVectorParserRuleCall_1() { return cVectorParserRuleCall_1; }

		//{LiteralString} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{LiteralString}
		public Action getLiteralStringAction_2_0() { return cLiteralStringAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}

	public class LiteralNumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.LiteralNum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLiteralIntAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cLiteralFloatAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueSignedFloatParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLiteralBoolAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueBoolParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//LiteralNum Literal:
		//	{LiteralInt} value=SignedInt
		//	| {LiteralFloat} value=SignedFloat
		//	| {LiteralBool} value=Bool
		@Override public ParserRule getRule() { return rule; }

		//{LiteralInt} value=SignedInt | {LiteralFloat} value=SignedFloat | {LiteralBool} value=Bool
		public Alternatives getAlternatives() { return cAlternatives; }

		//{LiteralInt} value=SignedInt
		public Group getGroup_0() { return cGroup_0; }

		//{LiteralInt}
		public Action getLiteralIntAction_0_0() { return cLiteralIntAction_0_0; }

		//value=SignedInt
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0_1_0() { return cValueSignedIntParserRuleCall_0_1_0; }

		//{LiteralFloat} value=SignedFloat
		public Group getGroup_1() { return cGroup_1; }

		//{LiteralFloat}
		public Action getLiteralFloatAction_1_0() { return cLiteralFloatAction_1_0; }

		//value=SignedFloat
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//SignedFloat
		public RuleCall getValueSignedFloatParserRuleCall_1_1_0() { return cValueSignedFloatParserRuleCall_1_1_0; }

		//{LiteralBool} value=Bool
		public Group getGroup_2() { return cGroup_2; }

		//{LiteralBool}
		public Action getLiteralBoolAction_2_0() { return cLiteralBoolAction_2_0; }

		//value=Bool
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Bool
		public RuleCall getValueBoolParserRuleCall_2_1_0() { return cValueBoolParserRuleCall_2_1_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVectorLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXLiteralNumOrVarParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYLiteralNumOrVarParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cCommaKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cZAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cZLiteralNumOrVarParserRuleCall_7_0 = (RuleCall)cZAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Vector Literal:
		//	{VectorLiteral} 'vector' '(' x=LiteralNumOrVar ',' y=LiteralNumOrVar ',' z=LiteralNumOrVar ')'
		@Override public ParserRule getRule() { return rule; }

		//{VectorLiteral} 'vector' '(' x=LiteralNumOrVar ',' y=LiteralNumOrVar ',' z=LiteralNumOrVar ')'
		public Group getGroup() { return cGroup; }

		//{VectorLiteral}
		public Action getVectorLiteralAction_0() { return cVectorLiteralAction_0; }

		//'vector'
		public Keyword getVectorKeyword_1() { return cVectorKeyword_1; }

		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//x=LiteralNumOrVar
		public Assignment getXAssignment_3() { return cXAssignment_3; }

		//LiteralNumOrVar
		public RuleCall getXLiteralNumOrVarParserRuleCall_3_0() { return cXLiteralNumOrVarParserRuleCall_3_0; }

		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//y=LiteralNumOrVar
		public Assignment getYAssignment_5() { return cYAssignment_5; }

		//LiteralNumOrVar
		public RuleCall getYLiteralNumOrVarParserRuleCall_5_0() { return cYLiteralNumOrVarParserRuleCall_5_0; }

		//','
		public Keyword getCommaKeyword_6() { return cCommaKeyword_6; }

		//z=LiteralNumOrVar
		public Assignment getZAssignment_7() { return cZAssignment_7; }

		//LiteralNumOrVar
		public RuleCall getZLiteralNumOrVarParserRuleCall_7_0() { return cZLiteralNumOrVarParserRuleCall_7_0; }

		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntType Type:
		//	{IntType} 'int'
		@Override public ParserRule getRule() { return rule; }

		//{IntType} 'int'
		public Group getGroup() { return cGroup; }

		//{IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType Type:
		//	{FloatType} 'float'
		@Override public ParserRule getRule() { return rule; }

		//{FloatType} 'float'
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//'float'
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class BoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.BoolType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BoolType Type:
		//	{BoolType} 'bool'
		@Override public ParserRule getRule() { return rule; }

		//{BoolType} 'bool'
		public Group getGroup() { return cGroup; }

		//{BoolType}
		public Action getBoolTypeAction_0() { return cBoolTypeAction_0; }

		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class VectorTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VectorType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVectorTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVectorKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VectorType Type:
		//	{VectorType} 'vector'
		@Override public ParserRule getRule() { return rule; }

		//{VectorType} 'vector'
		public Group getGroup() { return cGroup; }

		//{VectorType}
		public Action getVectorTypeAction_0() { return cVectorTypeAction_0; }

		//'vector'
		public Keyword getVectorKeyword_1() { return cVectorKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType Type:
		//	{StringType} 'string'
		@Override public ParserRule getRule() { return rule; }

		//{StringType} 'string'
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class VoidTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.VoidType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVoidTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVoidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//VoidType Type:
		//	{VoidType} 'void'
		@Override public ParserRule getRule() { return rule; }

		//{VoidType} 'void'
		public Group getGroup() { return cGroup; }

		//{VoidType}
		public Action getVoidTypeAction_0() { return cVoidTypeAction_0; }

		//'void'
		public Keyword getVoidKeyword_1() { return cVoidKeyword_1; }
	}

	public class SignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Sign");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//Sign:
		//	'-'
		//	//  | '+' //not allowed!
		//;
		@Override public ParserRule getRule() { return rule; }

		//'-'
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class SignedIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SignedInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//SignedInt ecore::EInt:
		//	Sign? INT
		@Override public ParserRule getRule() { return rule; }

		//Sign? INT
		public Group getGroup() { return cGroup; }

		//Sign?
		public RuleCall getSignParserRuleCall_0() { return cSignParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class SignedFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SignedFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSignParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SignedFloat ecore::EFloat:
		//	Sign? INT '.' INT
		@Override public ParserRule getRule() { return rule; }

		//Sign? INT '.' INT
		public Group getGroup() { return cGroup; }

		//Sign?
		public RuleCall getSignParserRuleCall_0() { return cSignParserRuleCall_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
	}

	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Bool ecore::EBoolean:
		//	'true'
		//	| 'false'
		@Override public ParserRule getRule() { return rule; }

		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	
	private final ProgramElements pProgram;
	private final DeclarationElements pDeclaration;
	private final IncludeDeclarationElements pIncludeDeclaration;
	private final PseudoIncludeDeclarationElements pPseudoIncludeDeclaration;
	private final VarDeclarationElements pVarDeclaration;
	private final LocalVarDeclarationElements pLocalVarDeclaration;
	private final GlobalVarDeclarationElements pGlobalVarDeclaration;
	private final ParameterDeclarationElements pParameterDeclaration;
	private final ForVarDeclarationElements pForVarDeclaration;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final FunctionTypeSpecifierElements pFunctionTypeSpecifier;
	private final RuleDeclarationElements pRuleDeclaration;
	private final VarTypeSpecifierElements pVarTypeSpecifier;
	private final BlockElements pBlock;
	private final VarDeclarationOrStatementElements pVarDeclarationOrStatement;
	private final StatementOrBlockElements pStatementOrBlock;
	private final StatementElements pStatement;
	private final ExpressionStatementElements pExpressionStatement;
	private final PostfixStatementElements pPostfixStatement;
	private final IfElseStatementElements pIfElseStatement;
	private final WhileStatementElements pWhileStatement;
	private final ForStatementElements pForStatement;
	private final SwitchStatementElements pSwitchStatement;
	private final SwitchCaseElements pSwitchCase;
	private final SwitchDefaultElements pSwitchDefault;
	private final ReturnStatementElements pReturnStatement;
	private final ContinueStatementElements pContinueStatement;
	private final BreakStatementElements pBreakStatement;
	private final PostFixOpElements pPostFixOp;
	private final ExpressionElements pExpression;
	private final AssignElements pAssign;
	private final SimpleExpressionElements pSimpleExpression;
	private final AndExpressionElements pAndExpression;
	private final EqualsExpressionElements pEqualsExpression;
	private final EqOpElements pEqOp;
	private final ComparisonExpressionElements pComparisonExpression;
	private final RelOpElements pRelOp;
	private final AdditiveExpressionElements pAdditiveExpression;
	private final AddOpElements pAddOp;
	private final MultiplicativeExpressionElements pMultiplicativeExpression;
	private final MulOpElements pMulOp;
	private final AtomElements pAtom;
	private final CallElements pCall;
	private final VarElements pVar;
	private final LiteralOrVarElements pLiteralOrVar;
	private final LiteralNumOrVarElements pLiteralNumOrVar;
	private final LiteralElements pLiteral;
	private final LiteralNumElements pLiteralNum;
	private final VectorElements pVector;
	private final IntTypeElements pIntType;
	private final FloatTypeElements pFloatType;
	private final BoolTypeElements pBoolType;
	private final VectorTypeElements pVectorType;
	private final StringTypeElements pStringType;
	private final VoidTypeElements pVoidType;
	private final SignElements pSign;
	private final SignedIntElements pSignedInt;
	private final SignedFloatElements pSignedFloat;
	private final BoolElements pBool;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tSTRING;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tPSEUDO_PRECOMPILER;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public XSGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pProgram = new ProgramElements();
		this.pDeclaration = new DeclarationElements();
		this.pIncludeDeclaration = new IncludeDeclarationElements();
		this.pPseudoIncludeDeclaration = new PseudoIncludeDeclarationElements();
		this.pVarDeclaration = new VarDeclarationElements();
		this.pLocalVarDeclaration = new LocalVarDeclarationElements();
		this.pGlobalVarDeclaration = new GlobalVarDeclarationElements();
		this.pParameterDeclaration = new ParameterDeclarationElements();
		this.pForVarDeclaration = new ForVarDeclarationElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pFunctionTypeSpecifier = new FunctionTypeSpecifierElements();
		this.pRuleDeclaration = new RuleDeclarationElements();
		this.pVarTypeSpecifier = new VarTypeSpecifierElements();
		this.pBlock = new BlockElements();
		this.pVarDeclarationOrStatement = new VarDeclarationOrStatementElements();
		this.pStatementOrBlock = new StatementOrBlockElements();
		this.pStatement = new StatementElements();
		this.pExpressionStatement = new ExpressionStatementElements();
		this.pPostfixStatement = new PostfixStatementElements();
		this.pIfElseStatement = new IfElseStatementElements();
		this.pWhileStatement = new WhileStatementElements();
		this.pForStatement = new ForStatementElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.pSwitchDefault = new SwitchDefaultElements();
		this.pReturnStatement = new ReturnStatementElements();
		this.pContinueStatement = new ContinueStatementElements();
		this.pBreakStatement = new BreakStatementElements();
		this.pPostFixOp = new PostFixOpElements();
		this.pExpression = new ExpressionElements();
		this.pAssign = new AssignElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pEqualsExpression = new EqualsExpressionElements();
		this.pEqOp = new EqOpElements();
		this.pComparisonExpression = new ComparisonExpressionElements();
		this.pRelOp = new RelOpElements();
		this.pAdditiveExpression = new AdditiveExpressionElements();
		this.pAddOp = new AddOpElements();
		this.pMultiplicativeExpression = new MultiplicativeExpressionElements();
		this.pMulOp = new MulOpElements();
		this.pAtom = new AtomElements();
		this.pCall = new CallElements();
		this.pVar = new VarElements();
		this.pLiteralOrVar = new LiteralOrVarElements();
		this.pLiteralNumOrVar = new LiteralNumOrVarElements();
		this.pLiteral = new LiteralElements();
		this.pLiteralNum = new LiteralNumElements();
		this.pVector = new VectorElements();
		this.pIntType = new IntTypeElements();
		this.pFloatType = new FloatTypeElements();
		this.pBoolType = new BoolTypeElements();
		this.pVectorType = new VectorTypeElements();
		this.pStringType = new StringTypeElements();
		this.pVoidType = new VoidTypeElements();
		this.pSign = new SignElements();
		this.pSignedInt = new SignedIntElements();
		this.pSignedFloat = new SignedFloatElements();
		this.pBool = new BoolElements();
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.INT");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.STRING");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ML_COMMENT");
		this.tPSEUDO_PRECOMPILER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.PSEUDO_PRECOMPILER");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "aom.scripting.xs.XS.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("aom.scripting.xs.XS".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	/// *
	//  * NOT supported by XS
	//  * - power a^n
	//  * - ternary b ? x : y;
	//  * - prefix: ++i
	//  * - inline pre/postfix: a + x++
	//  * - unary minus: -x 
	//  * - XOR (^)
	//  * - negation (!)
	//  * - long, double?
	//  * - bitwise and/or
	//  * - +=, -=, ...
	//  * 
	//  * other notes:
	//  *  - operator precedence is weird
	//  *  - only three scopes: global, file, local; file scope is only used for non-exported global variables
	//  *  - return() requires parentheses (except if not returning anything), and is optional
	//  *  - function arguments require default values
	//  *  - vector() only works for constant arguments
	//  *  - functions must be defined before they are used like in C, forward declarations are done with 'mutable <header> {}'
	//  *  - switch cases don't require a 'break'
	//  * / Program:
	//	{Program} declarations+=Declaration*;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//Declaration:
	//	GlobalVarDeclaration
	//	| FunctionDeclaration
	//	| IncludeDeclaration
	//	| PseudoIncludeDeclaration
	//	| RuleDeclaration;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//IncludeDeclaration:
	//	{IncludeDeclaration} 'include' filePath=STRING ';' // paths are relative to main directory (e.g. ai2 or trigger2), not to current directory
	//;
	public IncludeDeclarationElements getIncludeDeclarationAccess() {
		return pIncludeDeclaration;
	}
	
	public ParserRule getIncludeDeclarationRule() {
		return getIncludeDeclarationAccess().getRule();
	}

	//// can be used to make this program think an include declaration is present,
	//// which is useful for stuff that is actually present at runtime e.g. because two files are included in a third one.
	//PseudoIncludeDeclaration IncludeDeclaration:
	//	{IncludeDeclaration} PSEUDO_PRECOMPILER 'include' filePath=STRING ';'
	public PseudoIncludeDeclarationElements getPseudoIncludeDeclarationAccess() {
		return pPseudoIncludeDeclaration;
	}
	
	public ParserRule getPseudoIncludeDeclarationRule() {
		return getPseudoIncludeDeclarationAccess().getRule();
	}

	//// supertype only
	//VarDeclaration:
	//	LocalVarDeclaration
	//	| GlobalVarDeclaration
	//	| ParameterDeclaration
	//	| ForVarDeclaration;
	public VarDeclarationElements getVarDeclarationAccess() {
		return pVarDeclaration;
	}
	
	public ParserRule getVarDeclarationRule() {
		return getVarDeclarationAccess().getRule();
	}

	//LocalVarDeclaration:
	//	{LocalVarDeclaration} type=VarTypeSpecifier name=ID '=' value=Expression ';';
	public LocalVarDeclarationElements getLocalVarDeclarationAccess() {
		return pLocalVarDeclaration;
	}
	
	public ParserRule getLocalVarDeclarationRule() {
		return getLocalVarDeclarationAccess().getRule();
	}

	//GlobalVarDeclaration:
	//	{GlobalVarDeclaration} (const?='const'? & extern?='extern'?) type=VarTypeSpecifier name=ID '=' value=LiteralOrVar
	//	';';
	public GlobalVarDeclarationElements getGlobalVarDeclarationAccess() {
		return pGlobalVarDeclaration;
	}
	
	public ParserRule getGlobalVarDeclarationRule() {
		return getGlobalVarDeclarationAccess().getRule();
	}

	//ParameterDeclaration:
	//	{ParameterDeclaration} type=VarTypeSpecifier name=ID '=' value=LiteralOrVar;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return pParameterDeclaration;
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	//ForVarDeclaration:
	//	{ForVarDeclaration} name=ID '=' value=Expression //type='int'
	//;
	public ForVarDeclarationElements getForVarDeclarationAccess() {
		return pForVarDeclaration;
	}
	
	public ParserRule getForVarDeclarationRule() {
		return getForVarDeclarationAccess().getRule();
	}

	//FunctionDeclaration:
	//	{FunctionDeclaration} mutable?='mutable'? type=FunctionTypeSpecifier name=ID
	//	'(' ('void'? | parameters+=ParameterDeclaration (',' parameters+=ParameterDeclaration)*) ')'
	//	body=Block;
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//FunctionTypeSpecifier Type:
	//	VoidType
	//	| VarTypeSpecifier
	public FunctionTypeSpecifierElements getFunctionTypeSpecifierAccess() {
		return pFunctionTypeSpecifier;
	}
	
	public ParserRule getFunctionTypeSpecifierRule() {
		return getFunctionTypeSpecifierAccess().getRule();
	}

	//RuleDeclaration:
	//	{RuleDeclaration} 'rule' name=ID ((active?='active' | 'inactive') & runImmediately?='runImmediately'?
	//	& highFrequency?='highFrequency'?
	//	& ('group' group=ID)?
	//	& ('minInterval' minInterval=INT)?
	//	& ('maxInterval' maxInterval=INT)?
	//	& ('priority' priority=INT)?) body=Block;
	public RuleDeclarationElements getRuleDeclarationAccess() {
		return pRuleDeclaration;
	}
	
	public ParserRule getRuleDeclarationRule() {
		return getRuleDeclarationAccess().getRule();
	}

	//VarTypeSpecifier Type:
	//	IntType
	//	| FloatType
	//	| BoolType
	//	| VectorType
	//	| StringType
	public VarTypeSpecifierElements getVarTypeSpecifierAccess() {
		return pVarTypeSpecifier;
	}
	
	public ParserRule getVarTypeSpecifierRule() {
		return getVarTypeSpecifierAccess().getRule();
	}

	//Block:
	//	{Block} '{' contents+=VarDeclarationOrStatement* '}';
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//VarDeclarationOrStatement Statement:
	//	LocalVarDeclaration
	//	| Statement
	public VarDeclarationOrStatementElements getVarDeclarationOrStatementAccess() {
		return pVarDeclarationOrStatement;
	}
	
	public ParserRule getVarDeclarationOrStatementRule() {
		return getVarDeclarationOrStatementAccess().getRule();
	}

	//StatementOrBlock Statement:
	//	Statement
	//	| Block
	public StatementOrBlockElements getStatementOrBlockAccess() {
		return pStatementOrBlock;
	}
	
	public ParserRule getStatementOrBlockRule() {
		return getStatementOrBlockAccess().getRule();
	}

	//Statement:
	//	ExpressionStatement
	//	| PostfixStatement
	//	| IfElseStatement
	//	| WhileStatement
	//	| ForStatement
	//	| SwitchStatement
	//	| ReturnStatement
	//	| ContinueStatement //TODO add some restrictions (inside loop)
	//	| BreakStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//ExpressionStatement Statement:
	//	Call ';'
	//	| Assign ';'
	public ExpressionStatementElements getExpressionStatementAccess() {
		return pExpressionStatement;
	}
	
	public ParserRule getExpressionStatementRule() {
		return getExpressionStatementAccess().getRule();
	}

	//PostfixStatement Statement:
	//	{PostfixStatement} var=[VarDeclaration] op=PostFixOp ';'
	public PostfixStatementElements getPostfixStatementAccess() {
		return pPostfixStatement;
	}
	
	public ParserRule getPostfixStatementRule() {
		return getPostfixStatementAccess().getRule();
	}

	//IfElseStatement Statement:
	//	{IfElseStatement} 'if' '(' condition=Expression ')' thenStatement=StatementOrBlock (=> 'else'
	//	elseStatement=StatementOrBlock)?
	public IfElseStatementElements getIfElseStatementAccess() {
		return pIfElseStatement;
	}
	
	public ParserRule getIfElseStatementRule() {
		return getIfElseStatementAccess().getRule();
	}

	//WhileStatement Statement:
	//	{WhileStatement} 'while' '(' condition=Expression ')' statement=StatementOrBlock
	public WhileStatementElements getWhileStatementAccess() {
		return pWhileStatement;
	}
	
	public ParserRule getWhileStatementRule() {
		return getWhileStatementAccess().getRule();
	}

	//ForStatement Statement:
	//	{ForStatement} 'for' '(' var=ForVarDeclaration ';' op=RelOp end=Expression ')' statement=StatementOrBlock
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//SwitchStatement Statement:
	//	{SwitchStatement} 'switch' '(' expression=Expression ')' '{' cases+=SwitchCase* default=SwitchDefault? '}'
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//SwitchCase:
	//	{SwitchCase} 'case' (value=LiteralNumOrVar | '(' value=LiteralNumOrVar ')') ':' statement=StatementOrBlock;
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}

	//SwitchDefault:
	//	{SwitchDefault} 'default' ':' statement=StatementOrBlock;
	public SwitchDefaultElements getSwitchDefaultAccess() {
		return pSwitchDefault;
	}
	
	public ParserRule getSwitchDefaultRule() {
		return getSwitchDefaultAccess().getRule();
	}

	//ReturnStatement Statement:
	//	{ReturnStatement} 'return' ('(' expression=Expression ')')? ';'
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}

	//ContinueStatement Statement:
	//	{ContinueStatement} 'continue' ';'
	public ContinueStatementElements getContinueStatementAccess() {
		return pContinueStatement;
	}
	
	public ParserRule getContinueStatementRule() {
		return getContinueStatementAccess().getRule();
	}

	//BreakStatement Statement:
	//	{BreakStatement} 'break' ';'
	public BreakStatementElements getBreakStatementAccess() {
		return pBreakStatement;
	}
	
	public ParserRule getBreakStatementRule() {
		return getBreakStatementAccess().getRule();
	}

	//PostFixOp:
	//	'++'
	//	| '--';
	public PostFixOpElements getPostFixOpAccess() {
		return pPostFixOp;
	}
	
	public ParserRule getPostFixOpRule() {
		return getPostFixOpAccess().getRule();
	}

	//Expression:
	//	Assign
	//	| SimpleExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Assign Expression:
	//	{Assign} (var=Var '=' expression=Expression)
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//SimpleExpression Expression:
	//	AndExpression ({OrExpression.left=current} op='||' right=AndExpression)*
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//AndExpression Expression:
	//	EqualsExpression ({AndExpression.left=current} op='&&' right=EqualsExpression)*
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//EqualsExpression Expression:
	//	ComparisonExpression ({EqualsExpression.left=current} op=EqOp right=ComparisonExpression)?
	public EqualsExpressionElements getEqualsExpressionAccess() {
		return pEqualsExpression;
	}
	
	public ParserRule getEqualsExpressionRule() {
		return getEqualsExpressionAccess().getRule();
	}

	//EqOp:
	//	'=='
	//	| '!=';
	public EqOpElements getEqOpAccess() {
		return pEqOp;
	}
	
	public ParserRule getEqOpRule() {
		return getEqOpAccess().getRule();
	}

	//ComparisonExpression Expression:
	//	AdditiveExpression ({ComparisonExpression.left=current} op=RelOp right=AdditiveExpression)?
	public ComparisonExpressionElements getComparisonExpressionAccess() {
		return pComparisonExpression;
	}
	
	public ParserRule getComparisonExpressionRule() {
		return getComparisonExpressionAccess().getRule();
	}

	//RelOp:
	//	'<='
	//	| '<'
	//	| '>'
	//	| '>=';
	public RelOpElements getRelOpAccess() {
		return pRelOp;
	}
	
	public ParserRule getRelOpRule() {
		return getRelOpAccess().getRule();
	}

	//AdditiveExpression Expression:
	//	MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return pAdditiveExpression;
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//AddOp:
	//	'+'
	//	| '-';
	public AddOpElements getAddOpAccess() {
		return pAddOp;
	}
	
	public ParserRule getAddOpRule() {
		return getAddOpAccess().getRule();
	}

	//MultiplicativeExpression Expression:
	//	Atom ({Factor.left=current} op=MulOp right=Atom)*
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return pMultiplicativeExpression;
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//MulOp:
	//	'*'
	//	| '/'
	//	| '%' //modulo has same order of operation as multiplication
	//;
	public MulOpElements getMulOpAccess() {
		return pMulOp;
	}
	
	public ParserRule getMulOpRule() {
		return getMulOpAccess().getRule();
	}

	//Atom Expression:
	//	'(' Expression ')'
	//	| Call
	//	| Literal
	//	| Var
	public AtomElements getAtomAccess() {
		return pAtom;
	}
	
	public ParserRule getAtomRule() {
		return getAtomAccess().getRule();
	}

	//Call Expression:
	//	{Call} function=[FunctionDeclaration] '(' (arguments+=Expression (',' arguments+=Expression)*)? ')'
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}

	//Var:
	//	{Var} declaration=[VarDeclaration];
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//LiteralOrVar Expression:
	//	Literal
	//	| Var
	public LiteralOrVarElements getLiteralOrVarAccess() {
		return pLiteralOrVar;
	}
	
	public ParserRule getLiteralOrVarRule() {
		return getLiteralOrVarAccess().getRule();
	}

	//LiteralNumOrVar Expression:
	//	LiteralNum
	//	| Var
	public LiteralNumOrVarElements getLiteralNumOrVarAccess() {
		return pLiteralNumOrVar;
	}
	
	public ParserRule getLiteralNumOrVarRule() {
		return getLiteralNumOrVarAccess().getRule();
	}

	//Literal:
	//	LiteralNum
	//	| Vector
	//	| {LiteralString} value=STRING // TODO concatenation != addition
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//LiteralNum Literal:
	//	{LiteralInt} value=SignedInt
	//	| {LiteralFloat} value=SignedFloat
	//	| {LiteralBool} value=Bool
	public LiteralNumElements getLiteralNumAccess() {
		return pLiteralNum;
	}
	
	public ParserRule getLiteralNumRule() {
		return getLiteralNumAccess().getRule();
	}

	//Vector Literal:
	//	{VectorLiteral} 'vector' '(' x=LiteralNumOrVar ',' y=LiteralNumOrVar ',' z=LiteralNumOrVar ')'
	public VectorElements getVectorAccess() {
		return pVector;
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//IntType Type:
	//	{IntType} 'int'
	public IntTypeElements getIntTypeAccess() {
		return pIntType;
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//FloatType Type:
	//	{FloatType} 'float'
	public FloatTypeElements getFloatTypeAccess() {
		return pFloatType;
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//BoolType Type:
	//	{BoolType} 'bool'
	public BoolTypeElements getBoolTypeAccess() {
		return pBoolType;
	}
	
	public ParserRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}

	//VectorType Type:
	//	{VectorType} 'vector'
	public VectorTypeElements getVectorTypeAccess() {
		return pVectorType;
	}
	
	public ParserRule getVectorTypeRule() {
		return getVectorTypeAccess().getRule();
	}

	//StringType Type:
	//	{StringType} 'string'
	public StringTypeElements getStringTypeAccess() {
		return pStringType;
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//VoidType Type:
	//	{VoidType} 'void'
	public VoidTypeElements getVoidTypeAccess() {
		return pVoidType;
	}
	
	public ParserRule getVoidTypeRule() {
		return getVoidTypeAccess().getRule();
	}

	//Sign:
	//	'-'
	//	//  | '+' //not allowed!
	//;
	public SignElements getSignAccess() {
		return pSign;
	}
	
	public ParserRule getSignRule() {
		return getSignAccess().getRule();
	}

	//SignedInt ecore::EInt:
	//	Sign? INT
	public SignedIntElements getSignedIntAccess() {
		return pSignedInt;
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//SignedFloat ecore::EFloat:
	//	Sign? INT '.' INT
	public SignedFloatElements getSignedFloatAccess() {
		return pSignedFloat;
	}
	
	public ParserRule getSignedFloatRule() {
		return getSignedFloatAccess().getRule();
	}

	//Bool ecore::EBoolean:
	//	'true'
	//	| 'false'
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}

	//terminal ID:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal STRING:
	//	'"' ('\\"' | !('"' | '\n'))* '"';
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	} 

	//terminal PSEUDO_PRECOMPILER:
	//	'//#';
	public TerminalRule getPSEUDO_PRECOMPILERRule() {
		return tPSEUDO_PRECOMPILER;
	} 

	//terminal SL_COMMENT:
	//	'//' (!('\n' | '\r' | '#') !('\n' | '\r')*)? ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	} 
}
