grammar aom.scripting.xs.XS
	hidden(WS, ML_COMMENT, SL_COMMENT)

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate xs "http://aom.eso.com/xs"

 /*
  * NOT supported by XS
  * - power a^n
  * - ternary b ? x : y;
  * - prefix: ++i
  * - inline pre/postfix: a + x++
  * - unary minus: -x 
  * - XOR (^)
  * - negation (!)
  * - long, double?
  * - bitwise and/or
  * - +=, -=, ...
  * 
  * other notes:
  *  - operator precedence is weird
  *  - only three scopes: global, file, local; file scope is only used for non-exported global variables
  *  - return() requires parentheses (except if not returning anything), and is optional
  *  - function arguments require default values
  *  - vector() only works for constant arguments
  *  - functions must be defined before they are used like in C, forward declarations are done with 'mutable <header> {}'
  *  - switch cases don't require a 'break'
  */

Program returns Program
	: {Program} declarations += Declaration*
	;
	
Declaration returns Declaration
	: GlobalVarDeclaration
	| FunctionDeclaration
	| IncludeDeclaration
	| PseudoIncludeDeclaration
	| RuleDeclaration
	;
	
IncludeDeclaration returns IncludeDeclaration
	: {IncludeDeclaration} 'include' filePath=STRING ';' // paths are relative to main directory (e.g. ai2 or trigger2), not to current directory
	;
	
// can be used to make this program think an include declaration is present,
// which is useful for stuff that is actually present at runtime e.g. because two files are included in a third one.
PseudoIncludeDeclaration returns IncludeDeclaration
	: {IncludeDeclaration} PSEUDO_PRECOMPILER 'include' filePath=STRING ';'
	;
	
// supertype only
VarDeclaration returns VarDeclaration
	: LocalVarDeclaration
	| GlobalVarDeclaration
	| ParameterDeclaration
	| ForVarDeclaration
	;
	
LocalVarDeclaration returns LocalVarDeclaration
	: {LocalVarDeclaration} type=VarTypeSpecifier name=ID '=' value=Expression ';'
	;
	
GlobalVarDeclaration returns GlobalVarDeclaration
	: {GlobalVarDeclaration} (const?='const'? & extern?='extern'?) type=VarTypeSpecifier name=ID '=' value=LiteralOrVar ';'
	;
	
ParameterDeclaration returns ParameterDeclaration
	: {ParameterDeclaration} type=VarTypeSpecifier name=ID '=' value=LiteralOrVar
	;
	
ForVarDeclaration returns ForVarDeclaration
	: {ForVarDeclaration} name=ID '=' value=Expression //type='int'
	;

FunctionDeclaration returns FunctionDeclaration
	: {FunctionDeclaration} mutable?='mutable'? type=FunctionTypeSpecifier name=ID
		'(' ('void'? | parameters += ParameterDeclaration (',' parameters += ParameterDeclaration)*) ')'
		body=Block
	;
	
FunctionTypeSpecifier returns Type
	: VoidType
	| VarTypeSpecifier
	;
	
RuleDeclaration returns RuleDeclaration
	: {RuleDeclaration} 'rule' name=ID (
			(active?= 'active'|'inactive')
			& runImmediately?='runImmediately'?
			& highFrequency?='highFrequency'? 
			& ('group' group=ID)? 
			& ('minInterval' minInterval=INT)? 
			& ('maxInterval' maxInterval=INT)?
			& ('priority' priority=INT)?
		)
		body=Block
	;

VarTypeSpecifier returns Type
	: IntType
	| FloatType
	| BoolType
	| VectorType
	| StringType
	;
	
Block returns Block // cannot be used as a normal statement
	: {Block} '{' contents += (VarDeclarationOrStatement)* '}'
	;
	
VarDeclarationOrStatement returns Statement
	: LocalVarDeclaration
	| Statement
	;
	
StatementOrBlock returns Statement
	: Statement
	| Block
	;

Statement returns Statement
	: ExpressionStatement
    | PostfixStatement
	| IfElseStatement
	| WhileStatement
	| ForStatement
	| SwitchStatement
	| ReturnStatement
	| ContinueStatement //TODO add some restrictions (inside loop)
	| BreakStatement 
	;
	
ExpressionStatement returns Statement
	: Call ';'
	| Assign ';'
	;
	
PostfixStatement returns Statement
	: {PostfixStatement} var=[VarDeclaration] op=PostFixOp ';'
	;
	
IfElseStatement returns Statement
	: {IfElseStatement} 'if' '(' condition = Expression ')' thenStatement = StatementOrBlock (=>'else' elseStatement=StatementOrBlock)?
	;
	
WhileStatement returns Statement
	: {WhileStatement} 'while' '(' condition = Expression ')' statement = StatementOrBlock
	;
	
ForStatement returns Statement
	: {ForStatement} 'for' '(' var=ForVarDeclaration ';' op = RelOp end = Expression ')' statement = StatementOrBlock
	;
	
SwitchStatement returns Statement
	: {SwitchStatement} 'switch' '(' expression=Expression ')' '{' cases+=SwitchCase* default=SwitchDefault? '}'
	;
	
SwitchCase returns SwitchCase // TODO check if strings, floats, ... allowed
	: {SwitchCase} 'case' (value=LiteralNumOrVar | '(' value=LiteralNumOrVar ')') ':' statement=StatementOrBlock
	;
	
SwitchDefault returns SwitchDefault
	: {SwitchDefault} 'default' ':' statement=StatementOrBlock
	;

ReturnStatement returns Statement
	: {ReturnStatement} 'return' ('(' expression = Expression ')')? ';'
	;
	
ContinueStatement returns Statement
	: {ContinueStatement} 'continue' ';'
	;
	
BreakStatement returns Statement
	: {BreakStatement} 'break' ';'
	;

PostFixOp
	: '++'
	| '--'
	;

Expression returns Expression
	: Assign
	| SimpleExpression
	;
	
Assign returns Expression
	: {Assign} (var=Var '=' expression=Expression)
	;
	
SimpleExpression returns Expression
	: AndExpression ({OrExpression.left=current} op='||' right=AndExpression)*
	;
	
AndExpression returns Expression
	: EqualsExpression ({AndExpression.left=current} op='&&' right=EqualsExpression)*
	;

EqualsExpression returns Expression
	: ComparisonExpression ({EqualsExpression.left=current} op=EqOp right=ComparisonExpression)?
	;
	
EqOp
	: '=='
	| '!='
	;

ComparisonExpression returns Expression
	: AdditiveExpression ({ComparisonExpression.left=current} op=RelOp right=AdditiveExpression)?
	;

RelOp
	: '<=' 
	| '<' 
	| '>' 
	| '>=' 
	;

AdditiveExpression returns Expression
	: MultiplicativeExpression ({Term.left=current} op=AddOp right=MultiplicativeExpression)*
	;

AddOp
	: '+' 
	| '-'
	;
	
MultiplicativeExpression returns Expression
	: Atom ({Factor.left=current} op=MulOp right=Atom)*
	;
	
MulOp
	: '*'
	| '/'
	| '%' //modulo has same order of operation as multiplication
	;
	
Atom returns Expression
	: '(' Expression ')'
	| Call
	| Literal
	| Var
	;

Call returns Expression
	: {Call} function=[FunctionDeclaration] '(' (arguments += Expression (',' arguments += Expression)*)? ')' // TODO link with params?
	;
	
Var returns Var
	: {Var} declaration=[VarDeclaration]
	;
	
LiteralOrVar returns Expression
	: Literal
	| Var
	;

LiteralNumOrVar returns Expression
	: LiteralNum
	| Var
	;
	
Literal returns Literal
	: LiteralNum
	| Vector
	| {LiteralString} value=STRING // TODO concatenation != addition
	;

LiteralNum returns Literal
	: {LiteralInt} value=SignedInt
	| {LiteralFloat} value=SignedFloat
	| {LiteralBool} value=Bool // booleans are treated like ints
	;
	
Vector returns Literal
	: {VectorLiteral} 'vector' '(' x=LiteralNumOrVar ',' y=LiteralNumOrVar ',' z=LiteralNumOrVar ')' //only literals or constants, else use xsVectorSet
	;
	
IntType returns Type
	: {IntType} 'int'
	;
	
FloatType returns Type
	: {FloatType} 'float'
	;
	
BoolType returns Type
	: {BoolType} 'bool'
	;
	
VectorType returns Type
	: {VectorType} 'vector'
	;
	
StringType returns Type
	: {StringType} 'string'
	;
	
VoidType returns Type
	: {VoidType} 'void'
	;
	
Sign
	: '-'
//  | '+' //not allowed!
	;
	
SignedInt returns ecore::EInt
	: Sign? INT // TODO check that this is <= 9 digits
	;
	
SignedFloat returns ecore::EFloat
	: Sign? INT '.' INT
	;
	
Bool returns ecore::EBoolean
	: 'true'
	| 'false'
	;
	
	
// 'goto' is reserved, but I haven't tested whether and how it works. (actually, functions with this as name can be created, but calling them doesn't work)
GoTo: 'goto';


terminal ID: 
    ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
 
terminal INT returns ecore::EInt: 
    ('0'..'9')+;
 
terminal STRING: 
    '"' ( '\\"' | !('"'|'\n') )* '"';
    // XS strings use invalid escaping: the backslash only escapes double quotes and nothing else,
    // i.e. '\"' is '"', but '\\' is not '\', it's either '\\' or '\"' depending on if it is in the middle of a string or at the very end.
 
terminal ML_COMMENT: 
    '/*' -> '*/';

terminal PSEUDO_PRECOMPILER:
	'//#';

terminal SL_COMMENT: 
    '//' (!('\n'|'\r'|'#') !('\n'|'\r')*)? ('\r'? '\n')?;
 
terminal WS: 
    (' '|'\t'|'\r'|'\n')+;
 
terminal ANY_OTHER: 
    .;